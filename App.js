// ====================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–ú–ò –•–£–ö–û–í + —Ç–µ—Å—Ç–∏–º –≥–∏—Ç
// App.js - –ë–ï–ó –û–®–ò–ë–û–ö ESLINT + –§–£–ù–ö–¶–ò–ò –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø
// ====================================

import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  StatusBar,
  AppState,
  Alert,
  Platform,
  StyleSheet,
  Dimensions,
  Animated,
  SafeAreaView,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import MainApp from './MainApp';
import HabitFormModal from './HabitFormModal';
import SettingsScreen from './SettingsScreen';

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
import NotificationManager from './NotificationManager';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import {
  THEMES,
  DEFAULT_SETTINGS,
  STORAGE_KEYS,
  DEFAULT_ACHIEVEMENTS,
  SPACING,
  TYPOGRAPHY,
  BORDER_RADIUS,
} from './constants';

import { DEMO_HABITS, generateOnboardingHabits } from './demoData';
import { generateId, dateUtils, statsUtils, weightUtils } from './utils';

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

// === –í–ù–£–¢–†–ï–ù–ù–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
const AppContent = () => {
  // === SAFE AREA INSETS ===
  const insets = useSafeAreaInsets();

  // === –°–û–°–¢–û–Ø–ù–ò–ï ===
  const [habits, setHabits] = useState([]);
  const [archivedHabits, setArchivedHabits] = useState([]); // –ù–û–í–û–ï: –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
  const [achievements, setAchievements] = useState([]);
  const [settings, setSettings] = useState(DEFAULT_SETTINGS);
  const [isLoading, setIsLoading] = useState(true);
  const [appState, setAppState] = useState(AppState.currentState);

  // === UI –°–û–°–¢–û–Ø–ù–ò–ï ===
  const [showAddHabit, setShowAddHabit] = useState(false);
  const [editingHabit, setEditingHabit] = useState(null);
  const [showSettings, setShowSettings] = useState(false);
  const [isReady, setIsReady] = useState(false);
  const [isFirstLaunch, setIsFirstLaunch] = useState(false);
  const [notificationsInitialized, setNotificationsInitialized] =
    useState(false);

  // === –ê–ù–ò–ú–ê–¶–ò–ò ===
  const splashAnim = useRef(new Animated.Value(1)).current;
  const appAnim = useRef(new Animated.Value(0)).current;

  // === –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê ===
  const colors =
    THEMES[settings.theme]?.[settings.isDarkMode ? 'dark' : 'light'] ||
    THEMES.blue.light;

  // === –ù–û–í–´–ï HELPER –§–£–ù–ö–¶–ò–ò (–ü–°–ò–•–û–õ–û–ì–ò–Ø) ===

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–Ω—è
  const calculateDayProgress = useCallback((habits, date) => {
    let completed = 0;
    let total = 0;

    habits.forEach((habit) => {
      if (habit.isActive === false) return;

      total++;
      const completion = habit.completions?.[date];

      if (habit.type === 'boolean' && completion) {
        completed++;
      } else if (habit.type === 'weight' && completion?.weight > 0) {
        completed++;
      } else if (habit.type === 'number' && completion?.completed) {
        completed++;
      }
    });

    return {
      completed,
      total,
      percentage: total > 0 ? Math.round((completed / total) * 100) : 0,
    };
  }, []);


  /*
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const checkForNewAchievements = useCallback(async () => {
    try {
      const unlocked = achievements.map((a) => a.id);
      const available = DEFAULT_ACHIEVEMENTS.filter(
        (a) => !unlocked.includes(a.id)
      );

      if (available.length === 0) {
        console.log('–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
        return;
      }

      const newUnlockedAchievements = [];

      // –ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞
      if (habits.length > 0 && !unlocked.includes('first_habit')) {
        const achievement = available.find((a) => a.id === 'first_habit');
        if (achievement) newUnlockedAchievements.push(achievement);
      }

      // –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...

      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (newUnlockedAchievements.length > 0 && isReady) {
        for (const achievement of newUnlockedAchievements) {
          await unlockAchievement(achievement);
          setTimeout(() => {
            Alert.alert(
              '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
              `"${achievement.name}"\n${achievement.description}`,
              [{ text: '–ö—Ä—É—Ç–æ!', style: 'default' }]
            );
          }, 500);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
  }, [habits, achievements, isReady]);



  // === –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø ===
  const saveAchievements = useCallback(async (newAchievements) => {
    try {
      if (!newAchievements) return;
      await AsyncStorage.setItem(
        STORAGE_KEYS.achievements,
        JSON.stringify(newAchievements)
      );
      setAchievements(newAchievements);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
  }, []);
  */

  const saveHabits = useCallback(
    async (newHabits) => {
      try {
        if (!newHabits) {
          console.log('saveHabits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
          return;
        }

        console.log('saveHabits: —Å–æ—Ö—Ä–∞–Ω—è–µ–º', newHabits.length, '–ø—Ä–∏–≤—ã—á–µ–∫');

        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º state
        setHabits(newHabits);

        // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
        await AsyncStorage.setItem(
          STORAGE_KEYS.habits,
          JSON.stringify(newHabits)
        );
        console.log('saveHabits: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        setTimeout(() => {
          console.log('saveHabits: –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
          checkForNewAchievements();
        }, 100);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
        throw error;
      }
    },
    [checkForNewAchievements]
  );

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø saveSettings –ë–ï–ó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
  const saveSettings = useCallback(async (newSettings) => {
    try {
      if (!newSettings) return;
      await AsyncStorage.setItem(
        STORAGE_KEYS.settings,
        JSON.stringify(newSettings)
      );
      setSettings(newSettings);

      console.log(
        '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ù–ï –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)'
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }, []);

  // === –§–£–ù–ö–¶–ò–ò –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø ===
  const saveArchivedHabits = useCallback(async (archived) => {
    try {
      await AsyncStorage.setItem('@archivedHabits', JSON.stringify(archived));
      setArchivedHabits(archived);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', error);
    }
  }, []);

const archiveHabit = useCallback(async (habitId) => {
    console.log('üóÇÔ∏èüóÇÔ∏èüóÇÔ∏è App.js: archiveHabit –í–´–ó–í–ê–ù–ê! habitId =', habitId);
    console.log('üóÇÔ∏è App.js: –¢–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:', habits.length);
    console.log('üóÇÔ∏è App.js: –¢–µ–∫—É—â–∏–π –∞—Ä—Ö–∏–≤:', archivedHabits.length);
    
    try {
      const habitToArchive = habits.find(h => h.id === habitId);
      console.log('üóÇÔ∏è App.js: –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è?', !!habitToArchive);
      
      if (!habitToArchive) {
        console.error('üóÇÔ∏è App.js: –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! ID:', habitId);
        console.log('üóÇÔ∏è App.js: –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –ø—Ä–∏–≤—ã—á–µ–∫:', habits.map(h => h.id));
        return;
      }

      console.log('üóÇÔ∏è App.js: –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫—É:', habitToArchive.name);

      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const startDate = new Date(habitToArchive.createdAt);
      const endDate = new Date();
      
      // –°—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
      const totalDays = Math.max(1, Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)));
      
      // –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏
      let completedDays = 0;
      if (habitToArchive.completions) {
        Object.entries(habitToArchive.completions).forEach(([date, completion]) => {
          if (habitToArchive.type === 'boolean' && completion) {
            completedDays++;
          } else if (habitToArchive.type === 'weight' && completion?.weight > 0) {
            completedDays++;
          } else if ((habitToArchive.type === 'number' || habitToArchive.type === 'quantitative') && completion?.completed) {
            completedDays++;
          }
        });
      }
      
      const completionPercentage = Math.round((completedDays / totalDays) * 100);
      console.log('üóÇÔ∏è App.js: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–Ω–µ–π:', totalDays, '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', completedDays, '–ø—Ä–æ—Ü–µ–Ω—Ç:', completionPercentage);

      const archivedHabit = {
        ...habitToArchive,
        archivedAt: new Date().toISOString(),
        completionPercentage,
        archiveStats: {
          totalDays,
          completedDays,
          completionPercentage,
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString()
        }
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const newHabits = habits.filter(h => h.id !== habitId);
      const newArchivedHabits = [...archivedHabits, archivedHabit];

      console.log('üóÇÔ∏è App.js: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
      await saveHabits(newHabits);
      await saveArchivedHabits(newArchivedHabits);
      console.log('üóÇÔ∏è App.js: –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');

      // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      if (notificationsInitialized) {
        await NotificationManager.cancelHabitReminder(habitId);
      }

      Alert.alert(
        '–ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        `"${habitToArchive.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completionPercentage}%`,
        [{ text: 'OK' }]
      );

      console.log('üóÇÔ∏è App.js: –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('üóÇÔ∏è App.js: –û–®–ò–ë–ö–ê –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      console.error('üóÇÔ∏è App.js: Stack trace:', error.stack);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: ' + error.message);
    }
  }, [habits, archivedHabits, saveHabits, saveArchivedHabits, notificationsInitialized]);

  const restoreHabit = useCallback(
    async (habitId) => {
      try {
        const habitToRestore = archivedHabits.find((h) => h.id === habitId);
        if (!habitToRestore) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏ –≤ –¥–µ–Ω—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        const today = new Date().toISOString().split('T')[0];
        const archivedDate = habitToRestore.archivedAt
          ? new Date(habitToRestore.archivedAt).toISOString().split('T')[0]
          : null;

        // –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ù–ï –≤ –¥–µ–Ω—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º createdAt
        const shouldUpdateCreatedAt = archivedDate !== today;

        const restoredHabit = {
          ...habitToRestore,
          createdAt: shouldUpdateCreatedAt
            ? new Date().toISOString()
            : habitToRestore.createdAt,
          isRestored: true, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é
          restoredAt: new Date().toISOString(),
          // –°–û–•–†–ê–ù–Ø–ï–ú –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
          previousArchiveStats: habitToRestore.archiveStats,
          // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø–æ–ª—è
          archivedAt: undefined,
          completionPercentage: undefined,
        };

        // –£–¥–∞–ª—è–µ–º undefined –ø–æ–ª—è
        delete restoredHabit.archivedAt;
        delete restoredHabit.completionPercentage;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const newArchivedHabits = archivedHabits.filter(
          (h) => h.id !== habitId
        );
        const newHabits = [...habits, restoredHabit];

        await saveHabits(newHabits);
        await saveArchivedHabits(newArchivedHabits);

        Alert.alert(
          '–ü—Ä–∏–≤—ã—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
          `"${restoredHabit.name}" —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞`,
          [{ text: 'OK' }]
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [habits, archivedHabits, saveHabits, saveArchivedHabits]
  );

  const deleteArchivedHabit = useCallback(
    async (habitId) => {
      try {
        const habit = archivedHabits.find((h) => h.id === habitId);
        if (!habit) return;

        Alert.alert(
          '–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞?',
          `"${habit.name}" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.`,
          [
            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
            {
              text: '–£–¥–∞–ª–∏—Ç—å',
              style: 'destructive',
              onPress: async () => {
                const newArchivedHabits = archivedHabits.filter(
                  (h) => h.id !== habitId
                );
                await saveArchivedHabits(newArchivedHabits);
                Alert.alert('–£–¥–∞–ª–µ–Ω–æ', '–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞');
              },
            },
          ]
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–∞:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [archivedHabits, saveArchivedHabits]
  );

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
  const handleAppStateChange = useCallback(
    (nextAppState) => {
      if (appState.match(/inactive|background/) && nextAppState === 'active') {
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        setTimeout(() => checkForNewAchievements(), 500);
      }
      setAppState(nextAppState);
    },
    [appState, checkForNewAchievements]
  );

  // === –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò ===

  const loadHabits = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.habits);
      if (stored) {
        const parsed = JSON.parse(stored);
        // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        const habitsWithColors = parsed.map((habit) => ({
          ...habit,
          color: habit.color || '#2196F3', // –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }));
        setHabits(habitsWithColors);
        return habitsWithColors;
      } else {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–∏–≤—ã—á–∫–∏
        console.log('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–∏–≤—ã—á–∫–∏');
        const demoHabits = generateOnboardingHabits();
        await saveHabits(demoHabits);
        setIsFirstLaunch(true);
        return demoHabits;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫:', error);
      return [];
    }
  }, [saveHabits]);

  /*
  const loadAchievements = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.achievements);
      if (stored) {
        const parsed = JSON.parse(stored);
        setAchievements(parsed);
        return parsed;
      } else {
        return [];
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }, []);

  */

  const loadSettings = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.settings);
      if (stored) {
        const parsed = JSON.parse(stored);
        const mergedSettings = { ...DEFAULT_SETTINGS, ...parsed };
        setSettings(mergedSettings);
        return mergedSettings;
      } else {
        await saveSettings(DEFAULT_SETTINGS);
        return DEFAULT_SETTINGS;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return DEFAULT_SETTINGS;
    }
  }, [saveSettings]);

  const loadArchivedHabits = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem('@archivedHabits');
      if (stored) {
        const parsed = JSON.parse(stored);
        setArchivedHabits(parsed);
        return parsed;
      } else {
        return [];
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞:', error);
      return [];
    }
  }, []);

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
  const handleInitializationError = useCallback(
    (error) => {
      Alert.alert(
        '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞',
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.',
        [
          {
            text: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å',
            onPress: () => {
              // –ü—Ä—è–º–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
              setIsLoading(true);
              Promise.all([
                loadHabits(),
                loadAchievements(),
                loadSettings(),
                loadArchivedHabits(),
              ])
                .then(() => {
                  checkForNewAchievements();
                })
                .catch((err) => {
                  console.error('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
                })
                .finally(() => {
                  setIsLoading(false);
                });
            },
          },
        ]
      );
    },
    [
      loadHabits,
      loadAchievements,
      loadSettings,
      loadArchivedHabits,
      checkForNewAchievements,
    ]
  );

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
  const initializeApp = useCallback(async () => {
    try {
      setIsLoading(true);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [loadedHabits, loadedAchievements, loadedSettings, loadedArchived] =
        await Promise.all([
          loadHabits(),
          loadAchievements(),
          loadSettings(),
          loadArchivedHabits(),
        ]);

      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ:', {
        habits: loadedHabits.length,
        achievements: loadedAchievements.length,
        archived: loadedArchived.length,
        settings: loadedSettings,
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
      Animated.sequence([
        Animated.timing(splashAnim, {
          toValue: 0,
          duration: 400,
          useNativeDriver: true,
        }),
        Animated.timing(appAnim, {
          toValue: 1,
          duration: 600,
          useNativeDriver: true,
        }),
      ]).start(() => {
        setIsReady(true);
      });

      setIsLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      handleInitializationError(error);
    }
  }, [
    loadHabits,
    loadAchievements,
    loadSettings,
    loadArchivedHabits,
    handleInitializationError,
  ]);

  // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó) ===
  useEffect(() => {
    const initializeNotifications = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –µ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      if (isReady && habits.length > 0 && !notificationsInitialized) {
        console.log('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –û–î–ò–ù –†–ê–ó...');

        try {
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const notificationsEnabled = await NotificationManager.initialize();

          if (notificationsEnabled) {
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
            await NotificationManager.scheduleAllReminders(habits, settings);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await NotificationManager.debugInfo();
          } else {
            console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          }

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          setNotificationsInitialized(true);
        } catch (error) {
          console.error('üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
          setNotificationsInitialized(true); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      }
    };

    initializeNotifications();
  }, [isReady, habits, notificationsInitialized, settings]);

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò ===
  useEffect(() => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    initializeApp();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const subscription = AppState.addEventListener(
      'change',
      handleAppStateChange
    );

    return () => {
      subscription?.remove();
    };
  }, []);

  const addHabit = useCallback(
    async (habitData) => {
      try {
        const newHabit = {
          id: generateId(),
          ...habitData,
          reminderEnabled: habitData.reminderEnabled !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
          reminderTime: habitData.reminderTime || '09:00', // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          createdAt: new Date().toISOString(),
          completions: {},
          logs: [], // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        };

        const newHabits = [...habits, newHabit];
        await saveHabits(newHabits);

        // ---- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ----
        let notificationSuccess = false;
        if (newHabit.reminderEnabled && newHabit.reminderTime) {
          try {
            if (notificationsInitialized) {
              notificationSuccess =
                await NotificationManager.scheduleHabitReminder(
                  newHabit,
                  settings
                );
            } else {
              console.log(
                '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –±—É–¥—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ'
              );
              notificationSuccess = true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. –∑–∞–ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
          }
        } else {
          notificationSuccess = true; // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ –æ—à–∏–±–∫–∞
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if (notificationSuccess || !newHabit.reminderEnabled) {
          Alert.alert('–£—Å–ø–µ—Ö!', '–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } else {
          Alert.alert(
            '–í–Ω–∏–º–∞–Ω–∏–µ',
            '–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.'
          );
        }

        setShowAddHabit(false);
        setEditingHabit(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [habits, saveHabits, notificationsInitialized, settings]
  );

  const editHabit = useCallback(
    async (habitData) => {
      try {
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:', habitData);

        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—ã—á–∫—É
        const oldHabit = habits.find((h) => h.id === editingHabit.id);
        if (!oldHabit) {
          throw new Error('–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const updatedHabits = habits.map((habit) => {
          if (habit.id === editingHabit.id) {
            return {
              ...habit,
              ...habitData,
              // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è
              id: habit.id,
              createdAt: habit.createdAt,
              completions: habit.completions || {},
              logs: habit.logs || [],
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
              reminderEnabled:
                habitData.reminderEnabled !== undefined
                  ? habitData.reminderEnabled
                  : habit.reminderEnabled,
              reminderTime:
                habitData.reminderTime || habit.reminderTime || '09:00',
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
              updatedAt: new Date().toISOString(),
            };
          }
          return habit;
        });

        await saveHabits(updatedHabits);

        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (notificationsInitialized) {
          const updatedHabit = updatedHabits.find(
            (h) => h.id === editingHabit.id
          );

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ updateHabitReminder
          await NotificationManager.updateHabitReminder(updatedHabit, settings);
        }

        Alert.alert('–£—Å–ø–µ—Ö!', '–ü—Ä–∏–≤—ã—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        setShowAddHabit(false);
        setEditingHabit(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [habits, editingHabit, saveHabits, notificationsInitialized, settings]
  );

  const deleteHabit = useCallback(
    async (habitId) => {
      try {
        const habit = habits.find((h) => h.id === habitId);
        if (!habit) return;

        Alert.alert(
          '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É?',
          `"${habit.name}" –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.`,
          [
            { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
            {
              text: '–£–¥–∞–ª–∏—Ç—å',
              style: 'destructive',
              onPress: async () => {
                const newHabits = habits.filter((h) => h.id !== habitId);
                await saveHabits(newHabits);

                // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (notificationsInitialized) {
                  await NotificationManager.cancelHabitReminder(habitId);
                }

                Alert.alert('–£–¥–∞–ª–µ–Ω–æ', '–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
              },
            },
          ]
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [habits, saveHabits, notificationsInitialized]
  );

  const toggleHabitCompletion = useCallback(
    async (habitId, date) => {
      try {
        console.log('toggleHabitCompletion –≤—ã–∑–≤–∞–Ω:', { habitId, date });

        const updatedHabits = habits.map((habit) => {
          if (habit.id === habitId) {
            const completions = { ...habit.completions };

            if (habit.type === 'boolean') {
              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              if (completions[date]) {
                delete completions[date];
                console.log('–£–¥–∞–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã:', date);
              } else {
                completions[date] = true;
                console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã:', date);
              }
            }

            const updatedHabit = { ...habit, completions };
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:', updatedHabit);
            return updatedHabit;
          }
          return habit;
        });

        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:', updatedHabits);
        await saveHabits(updatedHabits);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      }
    },
    [habits, saveHabits]
  );

  const updateHabitValue = useCallback(
    async (habitId, date, value) => {
      try {
        console.log('updateHabitValue –≤—ã–∑–≤–∞–Ω:', { habitId, date, value });

        const updatedHabits = habits.map((habit) => {
          if (habit.id === habitId) {
            const completions = { ...habit.completions };
            const logs = [...(habit.logs || [])];

            if (habit.type === 'weight') {
              // –î–ª—è –≤–µ—Å–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
              const weightValue =
                typeof value === 'object' && value.weight
                  ? value.weight
                  : value;

              if (weightValue > 0) {
                const completion = {
                  weight: parseFloat(weightValue),
                  timestamp: value.timestamp || new Date().toISOString(),
                  targetWeight: value.targetWeight || habit.targetWeight,
                };
                completions[date] = completion;

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥–∏
                const existingLogIndex = logs.findIndex(
                  (log) => log.date === date
                );
                if (existingLogIndex >= 0) {
                  logs[existingLogIndex] = {
                    ...logs[existingLogIndex],
                    weight: parseFloat(weightValue),
                    timestamp: completion.timestamp,
                  };
                } else {
                  logs.push({
                    date,
                    weight: parseFloat(weightValue),
                    timestamp: completion.timestamp,
                  });
                }

                console.log('–î–æ–±–∞–≤–ª–µ–Ω –≤–µ—Å:', completion);
              } else {
                delete completions[date];
                // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–≥–æ–≤
                const logIndex = logs.findIndex((log) => log.date === date);
                if (logIndex >= 0) {
                  logs.splice(logIndex, 1);
                }
                console.log('–£–¥–∞–ª–µ–Ω –≤–µ—Å –¥–ª—è –¥–∞—Ç—ã:', date);
              }
            } else if (
              habit.type === 'quantitative' ||
              habit.type === 'number'
            ) {
              // –î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
              if (value > 0) {
                const completion = {
                  value: value,
                  completed: value >= (habit.targetValue || 1),
                  timestamp: new Date().toISOString(),
                };
                completions[date] = completion;
                console.log('–°–æ–∑–¥–∞–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:', completion);
              } else {
                delete completions[date];
                console.log('–£–¥–∞–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã:', date);
              }
            }

            const updatedHabit = { ...habit, completions, logs };
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:', updatedHabit);
            return updatedHabit;
          }
          return habit;
        });

        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:', updatedHabits);
        await saveHabits(updatedHabits);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
      }
    },
    [habits, saveHabits]
  );

  /*
  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø unlockAchievement –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
  const unlockAchievement = useCallback(async (achievement) => {
    try {
      if (!achievement) return;
      
      const newAchievement = {
        ...achievement,
        unlockedAt: new Date().toISOString()
      };
      
      const newAchievements = [...achievements, newAchievement];
      await saveAchievements(newAchievements);


 // === –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –î–û–°–¢–ò–ñ–ï–ù–ò–ò (–¢–û–õ–¨–ö–û –ï–°–õ–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–ö–õ–Æ–ß–ï–ù–´) ===
if (notificationsInitialized && settings.notifications?.achievement) {
  // NotificationManager —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  await NotificationManager.sendAchievementNotification(newAchievement);
}


    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
    }
  }, [achievements, saveAchievements, notificationsInitialized, settings.notifications]);

  */

  const startEditHabit = (habit) => {
    if (!habit) return;
    setEditingHabit(habit);
    setShowAddHabit(true);
  };

  const handleFormSave = async (habitData) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', habitData);

      if (editingHabit) {
        await editHabit(habitData);
      } else {
        await addHabit(habitData);
      }

      console.log('–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleFormSave:', error);
    }
  };

  const handleFormCancel = () => {
    setShowAddHabit(false);
    setEditingHabit(null);
  };

  // === –†–ï–ù–î–ï–† –ó–ê–°–¢–ê–í–ö–ò ===
  const renderSplashScreen = () => (
    <Animated.View
      style={[
        styles.splashContainer,
        {
          backgroundColor: colors.primary,
          opacity: splashAnim,
        },
      ]}>
      <View style={styles.splashContent}>
        <Animated.View
          style={[
            styles.splashLogo,
            {
              transform: [
                {
                  scale: splashAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [0.8, 1],
                  }),
                },
              ],
            },
          ]}>
          <View style={styles.logoIcon}>
            <Text style={styles.logoEmoji}>‚úì</Text>
          </View>
        </Animated.View>

        <Animated.Text
          style={[
            styles.splashTitle,
            {
              opacity: splashAnim,
              transform: [
                {
                  translateY: splashAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [20, 0],
                  }),
                },
              ],
            },
          ]}>
          –¢—Ä–µ–∫–µ—Ä –ü—Ä–∏–≤—ã—á–µ–∫
        </Animated.Text>

        <Animated.Text
          style={[
            styles.splashSubtitle,
            {
              opacity: splashAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [0, 0.8],
              }),
            },
          ]}>
          –ü—Ä–æ—Å—Ç—ã–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Å–∞
        </Animated.Text>
      </View>
    </Animated.View>
  );

  // === –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –û–¢–°–¢–£–ü–ê–ú–ò ===
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar
        barStyle={settings.isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={colors.background}
        translucent={false}
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ */}
      {!isReady ? null : (
        <Animated.View
          style={[
            styles.appContainer,
            {
              opacity: appAnim,
              transform: [
                {
                  scale: appAnim.interpolate({
                    inputRange: [0, 1],
                    outputRange: [0.95, 1],
                  }),
                },
              ],
            },
          ]}>
          <MainApp
            habits={habits}
            archivedHabits={archivedHabits}
            achievements={achievements}
            settings={settings}
            onHabitToggle={(habitId, date) => {
              console.log('App: Toggle –¥–ª—è', habitId, date);
              toggleHabitCompletion(habitId, date);
            }}
            onHabitUpdateValue={(habitId, date, value) => {
              console.log('App: UpdateValue –¥–ª—è', habitId, date, value);
              updateHabitValue(habitId, date, value);
            }}
            onHabitEdit={startEditHabit}
            onHabitDelete={deleteHabit}
            onHabitArchive={archiveHabit}
            onHabitRestore={restoreHabit}
            onArchivedHabitDelete={deleteArchivedHabit}
            onShowAddHabit={() => setShowAddHabit(true)}
            onShowSettings={() => setShowSettings(true)}
            //onAchievementUnlock={unlockAchievement}
            safeAreaInsets={insets}
          />
        </Animated.View>
      )}

      {/* –ó–∞—Å—Ç–∞–≤–∫–∞ */}
      {!isReady && renderSplashScreen()}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <HabitFormModal
        visible={showAddHabit}
        habit={editingHabit}
        onSave={handleFormSave}
        onCancel={handleFormCancel}
        theme={settings.theme}
        isDarkMode={settings.isDarkMode}
      />

      <SettingsScreen
        visible={showSettings}
        onClose={() => setShowSettings(false)}
        settings={settings}
        onSettingsChange={saveSettings}
        habits={habits}
        achievements={achievements}
      />
    </SafeAreaView>
  );
};

// === –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –° SAFE AREA PROVIDER ===
const App = () => (
  <SafeAreaProvider>
    <AppContent />
  </SafeAreaProvider>
);

// === –°–¢–ò–õ–ò –° –£–ß–ï–¢–û–ú SAFE AREA ===
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },

  appContainer: {
    flex: 1,
  },

  // === –ó–ê–°–¢–ê–í–ö–ê ===
  splashContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },

  splashContent: {
    alignItems: 'center',
  },

  splashLogo: {
    marginBottom: 32,
  },

  logoIcon: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 3,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },

  logoEmoji: {
    fontSize: 48,
    color: '#ffffff',
    fontWeight: 'bold',
  },

  splashTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 16,
    textAlign: 'center',
  },

  splashSubtitle: {
    fontSize: 16,
    color: '#ffffff',
    textAlign: 'center',
    paddingHorizontal: 32,
    lineHeight: 24,
  },
});

export default App;
