import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Modal,
  StyleSheet,
  SafeAreaView,
  Alert,
  Switch,
  Share,
  Dimensions
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import { 
  THEMES, 
  SPACING, 
  BORDER_RADIUS, 
  TYPOGRAPHY,
  DEFAULT_SETTINGS
} from './constants';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const SettingsScreen = ({
  visible,
  onClose,
  settings,
  onSettingsChange,
  habits,
  achievements
}) => {
  const [showThemeSelector, setShowThemeSelector] = useState(false);

  const colors = THEMES[settings.theme][settings.isDarkMode ? 'dark' : 'light'];

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
  const updateSetting = (key, value) => {
    const newSettings = {
      ...settings,
      [key]: value
    };
    onSettingsChange(newSettings);
  };

  const updateNotificationSetting = (key, value) => {
    const newSettings = {
      ...settings,
      notifications: {
        ...settings.notifications,
        [key]: value
      }
    };
    onSettingsChange(newSettings);
  };

  // === –£–ü–†–û–©–ï–ù–ù–´–ô –≠–ö–°–ü–û–†–¢ ===
  const handleSimpleExport = async () => {
    try {
      const exportData = {
        appName: '–¢—Ä–µ–∫–µ—Ä –ü—Ä–∏–≤—ã—á–µ–∫',
        exportDate: new Date().toLocaleDateString('ru-RU'),
        totalHabits: habits.length,
        totalAchievements: achievements.length,
        summary: `–£ –≤–∞—Å ${habits.length} –ø—Ä–∏–≤—ã—á–µ–∫ –∏ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéØ`,
        note: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–¢—Ä–µ–∫–µ—Ä –ü—Ä–∏–≤—ã—á–µ–∫"'
      };

      const message = `üéØ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–∏–≤—ã—á–∫–∞—Ö:\n\nüìä –ü—Ä–∏–≤—ã—á–µ–∫: ${exportData.totalHabits}\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${exportData.totalAchievements}\nüìÖ –ù–∞ –¥–∞—Ç—É: ${exportData.exportDate}\n\n${exportData.summary}`;

      await Share.share({
        message: message,
        title: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–∏–≤—ã—á–∫–∞—Ö'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏');
    }
  };

  const handleResetData = () => {
    Alert.alert(
      '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?',
      '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–°–±—Ä–æ—Å–∏—Ç—å',
          style: 'destructive',
          onPress: () => {
            onSettingsChange(DEFAULT_SETTINGS);
            Alert.alert('–ì–æ—Ç–æ–≤–æ', '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
            onClose();
          }
        }
      ]
    );
  };

  // === –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
  const renderSettingItem = ({ title, subtitle, value, onToggle, onPress, showArrow = false, danger = false }) => (
    <TouchableOpacity
      style={[styles.settingItem, { borderColor: colors.border }]}
      onPress={onPress}
      disabled={!onPress && !onToggle}
    >
      <View style={styles.settingContent}>
        <Text style={[styles.settingTitle, { color: danger ? colors.error : colors.text }]}>
          {title}
        </Text>
        {subtitle && (
          <Text style={[styles.settingSubtitle, { color: colors.textSecondary }]}>
            {subtitle}
          </Text>
        )}
      </View>
      <View style={styles.settingAction}>
        {onToggle ? (
          <Switch
            value={value}
            onValueChange={onToggle}
            trackColor={{
              false: colors.surface,
              true: colors.primary + '40'
            }}
            thumbColor={value ? colors.primary : colors.textSecondary}
          />
        ) : showArrow ? (
          <Ionicons name="chevron-forward" size={20} color={colors.textSecondary} />
        ) : (
          <Text style={[styles.settingValue, { color: colors.textSecondary }]}>
            {value}
          </Text>
        )}
      </View>
    </TouchableOpacity>
  );

  const renderSection = (title, children) => (
    <View style={styles.section}>
      <Text style={[styles.sectionTitle, { color: colors.text }]}>
        {title}
      </Text>
      {children}
    </View>
  );

  const renderThemeSelector = () => (
    <Modal
      visible={showThemeSelector}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={[styles.modalContainer, { backgroundColor: colors.background }]}>
        <View style={[styles.modalHeader, { borderColor: colors.border }]}>
          <TouchableOpacity onPress={() => setShowThemeSelector(false)}>
            <Text style={[styles.modalCancelButton, { color: colors.textSecondary }]}>
              –ì–æ—Ç–æ–≤–æ
            </Text>
          </TouchableOpacity>
          <Text style={[styles.modalTitle, { color: colors.text }]}>
            –í—ã–±–æ—Ä —Ç–µ–º—ã
          </Text>
          <View style={{ width: 60 }} />
        </View>

        <ScrollView style={styles.themeList}>
          {Object.keys(THEMES).map(themeKey => (
            <TouchableOpacity
              key={themeKey}
              style={[
                styles.themeItem,
                {
                  backgroundColor: colors.card,
                  borderColor: settings.theme === themeKey ? colors.primary : colors.border
                }
              ]}
              onPress={() => {
                updateSetting('theme', themeKey);
              }}
            >
              <View style={styles.themePreview}>
                <View style={[
                  styles.themeColorPrimary,
                  { backgroundColor: THEMES[themeKey].light.primary }
                ]} />
                <View style={[
                  styles.themeColorSecondary,
                  { backgroundColor: THEMES[themeKey].light.secondary }
                ]} />
                <View style={[
                  styles.themeColorSuccess,
                  { backgroundColor: THEMES[themeKey].light.success }
                ]} />
              </View>
              <View style={styles.themeInfo}>
                <Text style={[styles.themeName, { color: colors.text }]}>
                  {themeKey.charAt(0).toUpperCase() + themeKey.slice(1)}
                </Text>
                <Text style={[styles.themeDescription, { color: colors.textSecondary }]}>
                  {getThemeDescription(themeKey)}
                </Text>
              </View>
              {settings.theme === themeKey && (
                <Ionicons name="checkmark-circle" size={24} color={colors.primary} />
              )}
            </TouchableOpacity>
          ))}
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  const getThemeDescription = (themeKey) => {
    const descriptions = {
      blue: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—è—è —Ç–µ–º–∞',
      purple: '–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞',
      green: '–ü—Ä–∏—Ä–æ–¥–Ω–∞—è –∑–µ–ª–µ–Ω–∞—è —Ç–µ–º–∞',
      orange: '–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –æ—Ä–∞–Ω–∂–µ–≤–∞—è —Ç–µ–º–∞',
      indigo: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω–¥–∏–≥–æ —Ç–µ–º–∞'
    };
    return descriptions[themeKey] || '–ö—Ä–∞—Å–∏–≤–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞';
  };

  

  // === –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† ===
  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="fullScreen"
    >
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        {/* Header */}
        <View style={[styles.header, { borderColor: colors.border }]}>
          <TouchableOpacity onPress={onClose}>
            <Ionicons name="close" size={24} color={colors.text} />
          </TouchableOpacity>
          <Text style={[styles.headerTitle, { color: colors.text }]}>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </Text>
          <View style={{ width: 24 }} />
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          {renderSection('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', (
            <>
              {renderSettingItem({
                title: '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞',
                subtitle: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π',
                value: settings.isDarkMode,
                onToggle: (value) => updateSetting('isDarkMode', value)
              })}

              {renderSettingItem({
                title: '–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
                subtitle: `–¢–µ–∫—É—â–∞—è: ${settings.theme}`,
                value: '',
                onPress: () => setShowThemeSelector(true),
                showArrow: true
              })}
            </>
          ))}

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          {renderSection('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', (
            <>
              {renderSettingItem({
                title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö',
                subtitle: '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
                value: settings.notifications?.reminder || false,
                onToggle: (value) => updateNotificationSetting('reminder', value)
              })}

              {renderSettingItem({
                title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö',
                subtitle: '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥–∞—Ö',
                value: settings.notifications?.achievement || false,
                onToggle: (value) => updateNotificationSetting('achievement', value)
              })}
              
              {renderSettingItem({
  title: '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
  subtitle: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
  value: '',
  onPress: async () => {
    const success = await NotificationManager.sendTestNotification();
    Alert.alert(
      success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞',
      success ? '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
    );
  },
  showArrow: true
})}

              {renderSettingItem({
                title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–µ—Ä–∏—è—Ö',
                subtitle: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ—Ç–µ—Ä–µ–π —Å–µ—Ä–∏–∏',
                value: settings.notifications?.streak || false,
                onToggle: (value) => updateNotificationSetting('streak', value)
              })}
            </>
          ))}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          {renderSection('–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å', (
            <>
              {renderSettingItem({
                title: '–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫',
                subtitle: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
                value: habits?.length?.toString() || '0'
              })}

              {renderSettingItem({
                title: '–ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
                subtitle: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã',
                value: achievements?.length?.toString() || '0'
              })}

              {renderSettingItem({
                title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º',
                subtitle: '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö',
                value: '',
                onPress: handleSimpleExport,
                showArrow: true
              })}
            </>
          ))}

          {/* –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ */}
          {renderSection('–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', (
            <>
              {renderSettingItem({
                title: '–í–µ—Ä—Å–∏—è',
                subtitle: '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                value: '1.0.0'
              })}

              {renderSettingItem({
                title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                subtitle: '–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏',
                value: '',
                onPress: () => Alert.alert('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: support@habittracker.com'),
                showArrow: true
              })}

              {renderSettingItem({
                title: '–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                subtitle: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
                value: '',
                onPress: () => Alert.alert('–°–ø–∞—Å–∏–±–æ!', '–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ'),
                showArrow: true
              })}
            </>
          ))}

          {/* –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ */}
          {renderSection('–î–∞–Ω–Ω—ã–µ', (
            <>
              {renderSettingItem({
                title: '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ',
                subtitle: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                value: '',
                onPress: handleResetData,
                showArrow: true,
                danger: true
              })}
            </>
          ))}
        </ScrollView>

        {renderThemeSelector()}
      </SafeAreaView>
    </Modal>
  );
};

// === –°–¢–ò–õ–ò ===
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
  },
  
  headerTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: 'bold',
  },
  
  content: {
    flex: 1,
    paddingHorizontal: SPACING.md,
  },
  
  section: {
    marginVertical: SPACING.lg,
  },
  
  sectionTitle: {
    ...TYPOGRAPHY.h4,
    fontWeight: 'bold',
    marginBottom: SPACING.md,
  },
  
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: SPACING.md,
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
  
  settingContent: {
    flex: 1,
    marginRight: SPACING.md,
  },
  
  settingTitle: {
    ...TYPOGRAPHY.body,
    fontWeight: '500',
  },
  
  settingSubtitle: {
    ...TYPOGRAPHY.bodyMedium,
    marginTop: SPACING.xs,
  },
  
  settingAction: {
    alignItems: 'flex-end',
  },
  
  settingValue: {
    ...TYPOGRAPHY.bodyMedium,
  },
  
  // Theme Selector
  modalContainer: {
    flex: 1,
  },
  
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
  },
  
  modalTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: 'bold',
  },
  
  modalCancelButton: {
    ...TYPOGRAPHY.button,
  },
  
  themeList: {
    flex: 1,
    paddingHorizontal: SPACING.md,
    paddingTop: SPACING.lg,
  },
  
  themeItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 2,
    marginBottom: SPACING.sm,
  },
  
  themePreview: {
    flexDirection: 'row',
    marginRight: SPACING.md,
  },
  
  themeColorPrimary: {
    width: 20,
    height: 20,
    borderRadius: 10,
    marginRight: SPACING.xs,
  },
  
  themeColorSecondary: {
    width: 20,
    height: 20,
    borderRadius: 10,
    marginRight: SPACING.xs,
  },
  
  themeColorSuccess: {
    width: 20,
    height: 20,
    borderRadius: 10,
  },
  
  themeInfo: {
    flex: 1,
  },
  
  themeName: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
  },
  
  themeDescription: {
    ...TYPOGRAPHY.bodyMedium,
    marginTop: SPACING.xs,
  },
});

export default SettingsScreen;