// ====================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// src/screens/HomeScreen.js - –ë–ï–ó –û–®–ò–ë–û–ö ESLINT
// ====================================

import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  RefreshControl,
  StyleSheet,
  SafeAreaView,
  StatusBar,
  Dimensions,
  Animated,
  Alert,
  Platform,
  FlatList
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import HabitCard from './HabitCard';
import HabitFormModal from './HabitFormModal';
import SettingsScreen from './SettingsScreen';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import { 
  THEMES, 
  SPACING, 
  BORDER_RADIUS, 
  TYPOGRAPHY,
  HABIT_CATEGORIES,
  DEFAULT_SETTINGS,
  STORAGE_KEYS,
  DEFAULT_ACHIEVEMENTS
} from './constants';
import { 
  DEMO_HABITS,
  generateOnboardingHabits
} from './demoData';
import { 
  dateUtils, 
  statsUtils, 
  formatUtils,
  validationUtils,
  MOTIVATIONAL_QUOTES,
  generateId
} from './utils';

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

const HomeScreen = ({ navigation }) => {
  // === –°–û–°–¢–û–Ø–ù–ò–ï ===
  const [habits, setHabits] = useState([]);
  const [achievements, setAchievements] = useState([]);
  const [settings, setSettings] = useState(DEFAULT_SETTINGS);
  const [selectedDate, setSelectedDate] = useState(dateUtils.today());
  const [refreshing, setRefreshing] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isFirstLaunch, setIsFirstLaunch] = useState(false);
  
  // === UI –°–û–°–¢–û–Ø–ù–ò–ï ===
  const [activeTab, setActiveTab] = useState('home');
  const [showAddHabit, setShowAddHabit] = useState(false);
  const [editingHabit, setEditingHabit] = useState(null);
  const [showSettings, setShowSettings] = useState(false);
  const [filterCategory, setFilterCategory] = useState('all');
  const [sortBy, setSortBy] = useState('name');
  const [showCompleted, setShowCompleted] = useState(true);
  const [expandedCard, setExpandedCard] = useState(null);
  const [selectedPeriod, setSelectedPeriod] = useState('month');
  
  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
  const [todayStats, setTodayStats] = useState({
    completed: 0,
    total: 0,
    percentage: 0,
    streak: 0
  });

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const scrollY = useRef(new Animated.Value(0)).current;
  const headerOpacity = useRef(new Animated.Value(1)).current;
  const fabScale = useRef(new Animated.Value(1)).current;
  const motivationAnim = useRef(new Animated.Value(0)).current;
  const tabSwitchAnim = useRef(new Animated.Value(0)).current;

  // === –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø ===
  const saveAchievements = useCallback(async (newAchievements) => {
    try {
      if (!newAchievements) return;
      await AsyncStorage.setItem(STORAGE_KEYS.achievements, JSON.stringify(newAchievements));
      setAchievements(newAchievements);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
  }, []);

  const saveHabits = useCallback(async (newHabits) => {
    try {
      if (!newHabits) {
        console.log('saveHabits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
      }
      
      console.log('saveHabits: —Å–æ—Ö—Ä–∞–Ω—è–µ–º', newHabits.length, '–ø—Ä–∏–≤—ã—á–µ–∫');
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º state
      setHabits(newHabits);
      
      // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
      await AsyncStorage.setItem(STORAGE_KEYS.habits, JSON.stringify(newHabits));
      console.log('saveHabits: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      setTimeout(() => {
        console.log('saveHabits: –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        checkForNewAchievements();
      }, 100);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      throw error;
    }
  }, [checkForNewAchievements]);

  const saveSettings = useCallback(async (newSettings) => {
    try {
      if (!newSettings) return;
      await AsyncStorage.setItem(STORAGE_KEYS.settings, JSON.stringify(newSettings));
      setSettings(newSettings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }, []);

  // === –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
  const checkForNewAchievements = useCallback(async () => {
    try {
      const newUnlockedAchievements = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (habits.length >= 1) {
        const firstHabitAchievement = DEFAULT_ACHIEVEMENTS.find(a => a.id === 'first_habit');
        const isAlreadyUnlocked = achievements.some(a => a.id === 'first_habit');
        
        if (firstHabitAchievement && !isAlreadyUnlocked) {
          const unlockedAchievement = {
            ...firstHabitAchievement,
            unlockedAt: new Date().toISOString()
          };
          newUnlockedAchievements.push(unlockedAchievement);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∏
      const maxStreak = Math.max(...habits.map(habit => statsUtils.getStreak(habit)), 0);
      if (maxStreak >= 7) {
        const streakAchievement = DEFAULT_ACHIEVEMENTS.find(a => a.id === 'streak_7');
        const isAlreadyUnlocked = achievements.some(a => a.id === 'streak_7');
        
        if (streakAchievement && !isAlreadyUnlocked) {
          const unlockedAchievement = {
            ...streakAchievement,
            unlockedAt: new Date().toISOString()
          };
          newUnlockedAchievements.push(unlockedAchievement);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const totalCompletions = habits.reduce((sum, habit) => {
        return sum + Object.keys(habit.completions || {}).length;
      }, 0);
      
      if (totalCompletions >= 50) {
        const completionAchievement = DEFAULT_ACHIEVEMENTS.find(a => a.id === 'completion_50');
        const isAlreadyUnlocked = achievements.some(a => a.id === 'completion_50');
        
        if (completionAchievement && !isAlreadyUnlocked) {
          const unlockedAchievement = {
            ...completionAchievement,
            unlockedAt: new Date().toISOString()
          };
          newUnlockedAchievements.push(unlockedAchievement);
        }
      }
      
      if (newUnlockedAchievements.length > 0) {
        const updatedAchievements = [...achievements, ...newUnlockedAchievements];
        await saveAchievements(updatedAchievements);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        setTimeout(() => {
          const achievement = newUnlockedAchievements[0];
          Alert.alert(
            'üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
            `"${achievement.name}"\n${achievement.description}`,
            [{ text: '–ö—Ä—É—Ç–æ!', style: 'default' }]
          );
        }, 500);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
  }, [habits, achievements, saveAchievements]);

  // === –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò (–ò–°–ü–†–ê–í–õ–ï–ù–´ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò) ===
  const loadHabits = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.habits);
      if (stored) {
        const parsed = JSON.parse(stored);
        const validHabits = parsed.filter(habit => 
          habit && habit.id && habit.name && typeof habit.name === 'string'
        );
        setHabits(validHabits);
        return validHabits;
      } else {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        setIsFirstLaunch(true);
        const demoHabits = DEMO_HABITS.slice(0, 3);
        setHabits(demoHabits);
        await saveHabits(demoHabits);
        return demoHabits;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫:', error);
      const fallbackHabits = generateOnboardingHabits();
      setHabits(fallbackHabits);
      return fallbackHabits;
    }
  }, [saveHabits]);

  const loadAchievements = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.achievements);
      if (stored) {
        const parsed = JSON.parse(stored);
        setAchievements(parsed || []);
        return parsed || [];
      }
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }, []);

  const loadSettings = useCallback(async () => {
    try {
      const stored = await AsyncStorage.getItem(STORAGE_KEYS.settings);
      if (stored) {
        const parsed = JSON.parse(stored);
        const mergedSettings = { ...DEFAULT_SETTINGS, ...parsed };
        setSettings(mergedSettings);
        return mergedSettings;
      } else {
        await saveSettings(DEFAULT_SETTINGS);
        return DEFAULT_SETTINGS;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return DEFAULT_SETTINGS;
    }
  }, [saveSettings]);

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï (–ò–°–ü–†–ê–í–õ–ï–ù–´ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò) ===
  const initializeApp = useCallback(async () => {
    try {
      setLoading(true);
      
      await Promise.all([
        loadHabits(),
        loadAchievements(),
        loadSettings()
      ]);

      await checkForNewAchievements();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  }, [loadHabits, loadAchievements, loadSettings, checkForNewAchievements]);

  const updateTodayStats = useCallback(() => {
    if (!habits || habits.length === 0) {
      setTodayStats({ completed: 0, total: 0, percentage: 0, streak: 0 });
      return;
    }

    const completed = habits.filter(habit => {
      const completion = habit.completions?.[selectedDate];
      if (habit.type === 'boolean') {
        return Boolean(completion);
      } else {
        return completion && completion.completed;
      }
    }).length;
    
    const total = habits.length;
    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
    
    const currentStreaks = habits.map(habit => statsUtils.getStreak(habit));
    const maxStreak = Math.max(...currentStreaks, 0);
    
    setTodayStats({ completed, total, percentage, streak: maxStreak });
  }, [habits, selectedDate]);

  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await initializeApp();
    setRefreshing(false);
  }, [initializeApp]);

  // === –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–ò–í–´–ß–ö–ê–ú–ò ===
  const addHabit = useCallback(async (habitData) => {
    try {
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', habitData);
      
      if (!habitData || !habitData.name) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (habitData.name.trim().length < 3) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        return;
      }

      const habit = {
        id: generateId(),
        name: habitData.name.trim(),
  description: (habitData.description || '').trim(),
          icon: habitData.icon || 'üéØ',
        color: habitData.color || '#2196F3',
        category: habitData.category || 'health',
        type: habitData.type || 'boolean',
        targetValue: habitData.type !== 'boolean' ? (parseInt(habitData.targetValue) || 1) : undefined,
        unit: habitData.type !== 'boolean' ? habitData.unit : undefined,
        allowOverachievement: habitData.type !== 'boolean' ? habitData.allowOverachievement : undefined,
        targetDaysPerWeek: habitData.targetDaysPerWeek || 7,
        reminderTime: habitData.reminderTime || '09:00',
        createdAt: new Date().toISOString(),
        completions: {},
        archived: false
      };

      console.log('–°–æ–∑–¥–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:', habit);

      const newHabits = [...habits, habit];
      await saveHabits(newHabits);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setShowAddHabit(false);
      
      console.log('–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      
      return habit;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: ' + error.message);
      setShowAddHabit(false);
    }
  }, [habits, saveHabits]);

  const editHabit = useCallback(async (habitData) => {
    try {
      if (!editingHabit) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      if (!habitData || !habitData.name) {
        Alert.alert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã');
        return;
      }
      
      if (habitData.name.trim().length < 3) {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
        return;
      }

      const newHabits = habits.map(habit =>
        habit.id === editingHabit.id 
          ? { 
              ...habit, 
              ...habitData,
              name: habitData.name.trim(),
              description: habitData.description?.trim() || '',
              targetValue: habitData.type !== 'boolean' ? (parseInt(habitData.targetValue) || 1) : undefined,
              unit: habitData.type !== 'boolean' ? habitData.unit : undefined,
              allowOverachievement: habitData.type !== 'boolean' ? habitData.allowOverachievement : undefined,
              completions: habit.completions || {},
              updatedAt: new Date().toISOString() 
            }
          : habit
      );
      
      await saveHabits(newHabits);
      setShowAddHabit(false);
      setEditingHabit(null);
      
      console.log('–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
      setShowAddHabit(false);
      setEditingHabit(null);
    }
  }, [editingHabit, habits, saveHabits]);

  const deleteHabit = useCallback(async (habitId) => {
    try {
      if (!habitId) return;
      
      Alert.alert(
        '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É?',
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
        [
          { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
          {
            text: '–£–¥–∞–ª–∏—Ç—å',
            style: 'destructive',
            onPress: async () => {
              const newHabits = habits.filter(h => h.id !== habitId);
              await saveHabits(newHabits);
            }
          }
        ]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  }, [habits, saveHabits]);

  const showMotivationalMessage = useCallback((isQuantitative = false) => {
    try {
      setTimeout(() => {
        const messages = isQuantitative ? 
          ['üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!', 'üí™ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!', '‚≠ê –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!', 'üî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!'] :
          ['üéâ –û—Ç–ª–∏—á–Ω–æ!', 'üí™ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!', '‚≠ê –ü—Ä–æ–≥—Ä–µ—Å—Å!', 'üî• –°—É–ø–µ—Ä!'];
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        console.log('–ú–æ—Ç–∏–≤–∞—Ü–∏—è:', randomMessage);
      }, 100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }, []);

  const toggleHabitCompletion = useCallback(async (habitId, date) => {
    try {
      if (!habitId || !date) return;
      
      const newHabits = habits.map(habit => {
        if (habit.id === habitId) {
          const completions = { ...habit.completions };
          
          if (habit.type === 'boolean') {
            // –î–ª—è –±—É–ª–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            const wasCompleted = completions[date];
            completions[date] = !wasCompleted;
            
            if (!wasCompleted) {
              showMotivationalMessage();
            }
          } else {
            // –î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∫–ª–∏–∫–µ
            if (completions[date]) {
              delete completions[date];
            }
          }
          
          return { ...habit, completions };
        }
        return habit;
      });
      
      await saveHabits(newHabits);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—ã—á–∫–∏');
    }
  }, [habits, saveHabits, showMotivationalMessage]);

  const updateHabitValue = useCallback(async (habitId, date, value) => {
    try {
      console.log('updateHabitValue –≤—ã–∑–≤–∞–Ω–∞:', { habitId, date, value });
      
      if (!habitId || !date || value === undefined || value === null) {
        console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { habitId, date, value });
        return;
      }
      
      const newHabits = habits.map(habit => {
        if (habit.id === habitId) {
          console.log('–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞:', habit.name, '—Ç–∏–ø:', habit.type);
          
          const completions = { ...habit.completions };
          
          if (value > 0) {
            const completion = {
              value: value,
              completed: value >= (habit.targetValue || 1),
              timestamp: new Date().toISOString()
            };
            completions[date] = completion;
            
            console.log('–°–æ–∑–¥–∞–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:', completion);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
            if (value >= (habit.targetValue || 1)) {
              showMotivationalMessage(true);
            }
          } else {
            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 0
            delete completions[date];
            console.log('–£–¥–∞–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã:', date);
          }
          
          const updatedHabit = { ...habit, completions };
          console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞:', updatedHabit);
          return updatedHabit;
        }
        return habit;
      });
      
      console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:', newHabits);
      await saveHabits(newHabits);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
    }
  }, [habits, saveHabits, showMotivationalMessage]);

  const unlockAchievement = useCallback(async (achievement) => {
    try {
      if (!achievement) return;
      
      const newAchievement = {
        ...achievement,
        unlockedAt: new Date().toISOString()
      };
      
      const newAchievements = [...achievements, newAchievement];
      await saveAchievements(newAchievements);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
    }
  }, [achievements, saveAchievements]);

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
  const startEditHabit = useCallback((habit) => {
    if (!habit) return;
    setEditingHabit(habit);
    setShowAddHabit(true);
  }, []);

  const handleFormSave = useCallback(async (habitData) => {
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', habitData);
      
      if (editingHabit) {
        await editHabit(habitData);
      } else {
        await addHabit(habitData);
      }
      
      console.log('–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleFormSave:', error);
    }
  }, [editingHabit, editHabit, addHabit]);

  const handleFormCancel = useCallback(() => {
    setShowAddHabit(false);
    setEditingHabit(null);
  }, []);

  const handleTabSwitch = useCallback((newTab) => {
    if (activeTab !== newTab) {
      Animated.spring(tabSwitchAnim, {
        toValue: 1,
        tension: 100,
        friction: 8,
        useNativeDriver: true,
      }).start(() => {
        setActiveTab(newTab);
        tabSwitchAnim.setValue(0);
      });
    }
  }, [activeTab, tabSwitchAnim]);

  // === –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –ü–†–ò–í–´–ß–ö–ò ===
  const filteredHabits = useMemo(() => {
    let filtered = [...habits];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (filterCategory !== 'all') {
      filtered = filtered.filter(habit => habit.category === filterCategory);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
    if (!showCompleted) {
      filtered = filtered.filter(habit => {
        const completion = habit.completions?.[selectedDate];
        if (habit.type === 'boolean') {
          return !completion;
        } else {
          return !completion || !completion.completed;
        }
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'category':
          return a.category.localeCompare(b.category);
        case 'streak':
          return statsUtils.getStreak(b) - statsUtils.getStreak(a);
        case 'completion':
          return statsUtils.getCompletionRate(b, 30) - statsUtils.getCompletionRate(a, 30);
        default:
          return 0;
      }
    });
    
    return filtered;
  }, [habits, filterCategory, showCompleted, selectedDate, sortBy]);

  // === –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
  const renderHeader = () => (
    <View style={[styles.header, { backgroundColor: colors.background, borderColor: colors.border }]}>
      <View style={styles.headerContent}>
        <View style={styles.headerLeft}>
          <View style={[styles.logo, { backgroundColor: colors.primary }]}>
            <Ionicons name="checkmark-circle" size={24} color="#ffffff" />
          </View>
          <View style={styles.headerInfo}>
            <Text style={[styles.headerTitle, { color: colors.text }]}>
              –ü—Ä–∏–≤—ã—á–∫–∏
            </Text>
            <Text style={[styles.headerSubtitle, { color: colors.textSecondary }]}>
              {new Date().toLocaleDateString('ru-RU', { 
                weekday: 'long', 
                day: 'numeric', 
                month: 'long' 
              })}
            </Text>
          </View>
        </View>
        
        <TouchableOpacity
          style={[styles.settingsButton, { backgroundColor: colors.surface }]}
          onPress={() => setShowSettings(true)}
        >
          <Ionicons name="settings-outline" size={20} color={colors.text} />
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderProgress = () => (
    <View style={[styles.progressCard, { backgroundColor: colors.card, borderColor: colors.border }]}>
      <View style={styles.progressHeader}>
        <Text style={[styles.progressTitle, { color: colors.text }]}>
          –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        </Text>
        <Text style={[styles.progressNumbers, { color: colors.primary }]}>
          {todayStats.completed} –∏–∑ {todayStats.total}
        </Text>
      </View>
      
      <View style={[styles.progressTrack, { backgroundColor: colors.surface }]}>
        <View
          style={[
            styles.progressFill,
            {
              width: `${todayStats.percentage}%`,
              backgroundColor: colors.primary,
            }
          ]}
        />
      </View>
      
      <View style={styles.progressStats}>
        <Text style={[styles.progressPercentage, { color: colors.textSecondary }]}>
          {todayStats.percentage}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        </Text>
        <View style={styles.streakInfo}>
          <Ionicons name="flame" size={16} color="#FF6B35" />
          <Text style={[styles.streakText, { color: colors.textSecondary }]}>
            –°–µ—Ä–∏—è: {todayStats.streak}
          </Text>
        </View>
      </View>
    </View>
  );

  const renderMotivationalQuote = () => {
    const quote = MOTIVATIONAL_QUOTES[Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length)];
    
    return (
      <Animated.View 
        style={[
          styles.motivationCard, 
          { 
            backgroundColor: colors.card, 
            borderColor: colors.border,
            opacity: motivationAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [0.7, 1]
            })
          }
        ]}
      >
        <Text style={[styles.motivationText, { color: colors.text }]}>
          "{quote.text}"
        </Text>
        <Text style={[styles.motivationAuthor, { color: colors.textSecondary }]}>
          ‚Äî {quote.author}
        </Text>
      </Animated.View>
    );
  };

  const renderFilters = () => (
    <View style={styles.filtersContainer}>
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.filtersContent}
      >
        <TouchableOpacity
          style={[
            styles.filterButton,
            {
              backgroundColor: filterCategory === 'all' ? colors.primary : colors.surface,
            }
          ]}
          onPress={() => setFilterCategory('all')}
        >
          <Text style={styles.filterButtonIcon}>üè†</Text>
          <Text style={[
            styles.filterButtonText,
            { color: filterCategory === 'all' ? '#ffffff' : colors.textSecondary }
          ]}>
            –í—Å–µ
          </Text>
        </TouchableOpacity>
        
        {Object.entries(HABIT_CATEGORIES).map(([key, category]) => (
          <TouchableOpacity
            key={key}
            style={[
              styles.filterButton,
              {
                backgroundColor: filterCategory === key ? colors.primary : colors.surface,
              }
            ]}
            onPress={() => setFilterCategory(key)}
          >
            <Text style={styles.filterButtonIcon}>{category.icon}</Text>
            <Text style={[
              styles.filterButtonText,
              { color: filterCategory === key ? '#ffffff' : colors.textSecondary }
            ]}>
              {category.label}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
      
      <View style={styles.sortContainer}>
        <TouchableOpacity
          style={[styles.sortButton, { backgroundColor: colors.surface }]}
          onPress={() => {
            const sorts = ['name', 'category', 'streak', 'completion'];
            const currentIndex = sorts.indexOf(sortBy);
            const nextSort = sorts[(currentIndex + 1) % sorts.length];
            setSortBy(nextSort);
          }}
        >
          <Ionicons name="funnel-outline" size={18} color={colors.text} />
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderHabitsList = () => (
    <View style={styles.habitsList}>
      <View style={styles.habitsHeader}>
        <Text style={[styles.sectionTitle, { color: colors.text }]}>
          –ü—Ä–∏–≤—ã—á–∫–∏ ({filteredHabits.length})
        </Text>
        <TouchableOpacity
          style={[styles.addButton, { backgroundColor: colors.primary }]}
          onPress={() => setShowAddHabit(true)}
        >
          <Ionicons name="add" size={20} color="#ffffff" />
        </TouchableOpacity>
      </View>
      
      {filteredHabits.length === 0 ? (
        <View style={styles.emptyState}>
          <Text style={styles.emptyIcon}>üéØ</Text>
          <Text style={[styles.emptyTitle, { color: colors.text }]}>
            {habits.length === 0 ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É' : '–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É'}
          </Text>
          <Text style={[styles.emptyDescription, { color: colors.textSecondary }]}>
            {habits.length === 0 
              ? '–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å –ø–æ–¥—Å—á–µ—Ç–æ–º'
              : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É'
            }
          </Text>
          <TouchableOpacity
            style={[styles.emptyActionButton, { backgroundColor: colors.primary }]}
            onPress={() => setShowAddHabit(true)}
          >
            <Ionicons name="add-circle" size={20} color="#ffffff" />
            <Text style={styles.emptyActionText}>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View style={styles.habitsList}>
          {filteredHabits.map((habit) => (
            <HabitCard
              key={habit.id}
              habit={habit}
              selectedDate={selectedDate}
              onToggle={(habitId, date) => {
                console.log('Toggle –≤—ã–∑–≤–∞–Ω –¥–ª—è:', habitId, date);
                toggleHabitCompletion(habitId, date);
              }}
              onUpdateValue={(habitId, date, value) => {
                console.log('UpdateValue –≤—ã–∑–≤–∞–Ω –¥–ª—è:', habitId, date, value);
                updateHabitValue(habitId, date, value);
              }}
              onEdit={startEditHabit}
              onDelete={deleteHabit}
              theme={settings.theme}
              isDarkMode={settings.isDarkMode}
            />
          ))}
        </View>
      )}
    </View>
  );

  // –£–ü–†–û–©–ï–ù–ù–´–ï –ü–õ–ï–ô–°–•–û–õ–î–ï–†–´ –í–ú–ï–°–¢–û –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
  const renderCalendar = () => (
    <View style={styles.placeholderContainer}>
      <Text style={styles.placeholderIcon}>üìÖ</Text>
      <Text style={[styles.placeholderText, { color: colors.text }]}>
        –ö–∞–ª–µ–Ω–¥–∞—Ä—å
      </Text>
      <Text style={[styles.placeholderDescription, { color: colors.textSecondary }]}>
        –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥ —Å —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      </Text>
    </View>
  );

  const renderStatistics = () => (
    <View style={styles.placeholderContainer}>
      <Text style={styles.placeholderIcon}>üìä</Text>
      <Text style={[styles.placeholderText, { color: colors.text }]}>
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      </Text>
      <Text style={[styles.placeholderDescription, { color: colors.textSecondary }]}>
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      </Text>
    </View>
  );

  const renderAchievements = () => (
    <View style={styles.placeholderContainer}>
      <Text style={styles.placeholderIcon}>üèÜ</Text>
      <Text style={[styles.placeholderText, { color: colors.text }]}>
        –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </Text>
      <Text style={[styles.placeholderDescription, { color: colors.textSecondary }]}>
        –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      </Text>
      {achievements.length > 0 && (
        <View style={styles.achievementsList}>
          <Text style={[styles.achievementsTitle, { color: colors.text }]}>
            –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements.length}
          </Text>
          {achievements.slice(0, 3).map((achievement, index) => (
            <View key={index} style={[styles.achievementItem, { backgroundColor: colors.surface }]}>
              <Text style={styles.achievementIcon}>{achievement.icon}</Text>
              <Text style={[styles.achievementName, { color: colors.text }]}>
                {achievement.name}
              </Text>
            </View>
          ))}
        </View>
      )}
    </View>
  );

  const renderTabBar = () => (
    <View style={[
      styles.tabBar, 
      { 
        backgroundColor: colors.card, 
        borderColor: colors.border,
        paddingBottom: Platform.OS === 'android' ? SPACING.md : SPACING.sm,
      }
    ]}>
      {[
        { id: 'home', label: '–î–æ–º', icon: 'home-outline' },
        { id: 'calendar', label: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', icon: 'calendar-outline' },
        { id: 'stats', label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'bar-chart-outline' },
        { id: 'achievements', label: '–ù–∞–≥—Ä–∞–¥—ã', icon: 'trophy-outline' }
      ].map(tab => (
        <TouchableOpacity
          key={tab.id}
          style={[
            styles.tabButton,
            { backgroundColor: activeTab === tab.id ? colors.primary + '15' : 'transparent' }
          ]}
          onPress={() => handleTabSwitch(tab.id)}
        >
          <Ionicons
            name={tab.icon}
            size={22}
            color={activeTab === tab.id ? colors.primary : colors.textSecondary}
          />
          <Text style={[
            styles.tabLabel,
            { color: activeTab === tab.id ? colors.primary : colors.textSecondary }
          ]}>
            {tab.label}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );

  // === –≠–§–§–ï–ö–¢–´ ===
  useEffect(() => {
    initializeApp();
  }, [initializeApp]);

  useEffect(() => {
    updateTodayStats();
  }, [updateTodayStats]);

  useEffect(() => {
    if (isFirstLaunch && !loading && habits.length > 0) {
      setTimeout(() => {
        Alert.alert(
          'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          '–ú—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ (–¥–∞/–Ω–µ—Ç) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏!',
          [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
        );
      }, 1000);
    }
  }, [isFirstLaunch, loading, habits.length]);

  useEffect(() => {
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
    Animated.loop(
      Animated.sequence([
        Animated.timing(motivationAnim, {
          toValue: 1,
          duration: 2000,
          useNativeDriver: true,
        }),
        Animated.timing(motivationAnim, {
          toValue: 0,
          duration: 2000,
          useNativeDriver: true,
        })
      ])
    ).start();
  }, [motivationAnim]);

  // === –¶–í–ï–¢–ê ===
  const colors = THEMES[settings.theme] ? 
    THEMES[settings.theme][settings.isDarkMode ? 'dark' : 'light'] : 
    THEMES.blue.light;

  // === –†–ï–ù–î–ï–† ===
  if (loading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <Animated.View style={[styles.loadingSpinner, {
            transform: [{ rotate: motivationAnim.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '360deg']
            }) }]
          }]}>
            <Ionicons name="refresh" size={32} color={colors.primary} />
          </Animated.View>
          <Text style={[styles.loadingText, { color: colors.text }]}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <StatusBar
        barStyle={settings.isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={colors.background}
      />
      
      {renderHeader()}
      
      <Animated.ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[colors.primary]}
            tintColor={colors.primary}
          />
        }
        showsVerticalScrollIndicator={false}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { 
            useNativeDriver: true,
            listener: (event) => {
              const offsetY = event.nativeEvent.contentOffset.y;
              const newOpacity = Math.max(0, Math.min(1, 1 - offsetY / 100));
              headerOpacity.setValue(newOpacity);
            }
          }
        )}
        scrollEventThrottle={16}
        contentContainerStyle={styles.scrollContent}
      >
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
        <Animated.View 
          style={[
            styles.tabContent,
            {
              opacity: tabSwitchAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [1, 0]
              })
            }
          ]}
        >
          {activeTab === 'home' && (
            <>
              {renderProgress()}
              {habits.length > 0 && renderMotivationalQuote()}
              {renderFilters()}
              {renderHabitsList()}
            </>
          )}
          
          {activeTab === 'calendar' && (
            <>
              {renderProgress()}
              {renderCalendar()}
            </>
          )}
          
          {activeTab === 'stats' && (
            <>
              {renderStatistics()}
            </>
          )}
          
          {activeTab === 'achievements' && (
            <>
              {renderAchievements()}
            </>
          )}
        </Animated.View>
      </Animated.ScrollView>
      
      {renderTabBar()}
      
      {/* Floating Action Button */}
      <Animated.View 
        style={[
          styles.fab,
          {
            backgroundColor: colors.primary,
            transform: [{ scale: fabScale }]
          }
        ]}
      >
        <TouchableOpacity
          style={styles.fabButton}
          onPress={() => setShowAddHabit(true)}
          onPressIn={() => {
            Animated.spring(fabScale, {
              toValue: 0.9,
              useNativeDriver: true,
            }).start();
          }}
          onPressOut={() => {
            Animated.spring(fabScale, {
              toValue: 1,
              useNativeDriver: true,
            }).start();
          }}
        >
          <Ionicons name="add" size={28} color="#ffffff" />
        </TouchableOpacity>
      </Animated.View>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <HabitFormModal
        visible={showAddHabit}
        habit={editingHabit}
        onSave={handleFormSave}
        onCancel={handleFormCancel}
        theme={settings.theme}
        isDarkMode={settings.isDarkMode}
      />
      
      <SettingsScreen
        visible={showSettings}
        onClose={() => setShowSettings(false)}
        settings={settings}
        onSettingsChange={saveSettings}
        habits={habits}
        achievements={achievements}
      />
    </SafeAreaView>
  );
};

// === –°–¢–ò–õ–ò ===
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  loadingSpinner: {
    marginBottom: SPACING.lg,
  },
  
  loadingText: {
    fontSize: 18,
    fontWeight: '500',
  },
  
  content: {
    flex: 1,
  },
  
  scrollContent: {
    paddingBottom: Platform.OS === 'android' ? 120 : 100,
  },
  
  tabContent: {
    flex: 1,
  },
  
  // === –ó–ê–ì–û–õ–û–í–û–ö ===
  header: {
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
  },
  
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  logo: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
  },
  
  headerInfo: {
    flex: 1,
  },
  
  headerTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: 'bold',
  },
  
  headerSubtitle: {
    ...TYPOGRAPHY.bodyMedium,
    textTransform: 'capitalize',
  },
  
  settingsButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  // === –ü–†–û–ì–†–ï–°–° ===
  progressCard: {
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    padding: SPACING.lg,
    margin: SPACING.md,
  },
  
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  
  progressTitle: {
    ...TYPOGRAPHY.h4,
    fontWeight: '600',
  },
  
  progressNumbers: {
    ...TYPOGRAPHY.h4,
    fontWeight: 'bold',
  },
  
  progressTrack: {
    height: 8,
    borderRadius: 4,
    marginBottom: SPACING.md,
    overflow: 'hidden',
  },
  
  progressFill: {
    height: '100%',
    borderRadius: 4,
  },
  
  progressStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  
  progressPercentage: {
    ...TYPOGRAPHY.bodyMedium,
    fontWeight: '600',
  },
  
  streakInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  streakText: {
    ...TYPOGRAPHY.bodyMedium,
    marginLeft: SPACING.xs,
  },
  
  // === –ú–û–¢–ò–í–ê–¶–ò–Ø ===
  motivationCard: {
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    padding: SPACING.lg,
    margin: SPACING.md,
    marginTop: 0,
  },
  
  motivationText: {
    ...TYPOGRAPHY.body,
    fontStyle: 'italic',
    lineHeight: 24,
    marginBottom: SPACING.sm,
  },
  
  motivationAuthor: {
    ...TYPOGRAPHY.bodyMedium,
    textAlign: 'right',
  },
  
  // === –§–ò–õ–¨–¢–†–´ ===
  filtersContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
  },
  
  filtersContent: {
    flex: 1,
  },
  
  filterButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderRadius: BORDER_RADIUS.full,
    marginRight: SPACING.sm,
  },
  
  filterButtonIcon: {
    fontSize: 16,
    marginRight: SPACING.xs,
  },
  
  filterButtonText: {
    ...TYPOGRAPHY.bodyMedium,
    fontWeight: '600',
  },
  
  sortContainer: {
    flexDirection: 'row',
  },
  
  sortButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  // === –°–ü–ò–°–ö–ò ===
  habitsList: {
    paddingHorizontal: SPACING.md,
  },
  
  habitsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  
  sectionTitle: {
    ...TYPOGRAPHY.h4,
    fontWeight: '600',
  },
  
  addButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  // === –ü–£–°–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: SPACING.xxxl,
    paddingHorizontal: SPACING.lg,
  },
  
  emptyIcon: {
    fontSize: 64,
    marginBottom: SPACING.lg,
  },
  
  emptyTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: SPACING.md,
  },
  
  emptyDescription: {
    ...TYPOGRAPHY.body,
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: SPACING.xl,
  },
  
  emptyActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.full,
    gap: SPACING.sm,
  },
  
  emptyActionText: {
    ...TYPOGRAPHY.button,
    color: '#ffffff',
    fontWeight: '600',
  },

  // === –ü–õ–ï–ô–°–•–û–õ–î–ï–†–´ ===
  placeholderContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: SPACING.xxxl,
    paddingHorizontal: SPACING.lg,
    minHeight: 300,
  },
  
  placeholderIcon: {
    fontSize: 64,
    marginBottom: SPACING.lg,
  },
  
  placeholderText: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: SPACING.sm,
  },
  
  placeholderDescription: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: SPACING.lg,
    lineHeight: 24,
  },

  // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
  achievementsList: {
    marginTop: SPACING.lg,
    alignItems: 'center',
  },
  
  achievementsTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: SPACING.md,
  },
  
  achievementItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    marginBottom: SPACING.sm,
    minWidth: 200,
  },
  
  achievementIcon: {
    fontSize: 20,
    marginRight: SPACING.sm,
  },
  
  achievementName: {
    fontSize: 14,
    fontWeight: '500',
  },
  
  // === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
  tabBar: {
    flexDirection: 'row',
    borderTopWidth: 1,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.xs,
  },
  
  tabButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.xs,
    borderRadius: BORDER_RADIUS.md,
    marginHorizontal: SPACING.xs,
  },
  
  tabLabel: {
    ...TYPOGRAPHY.caption,
    fontWeight: '600',
    marginTop: SPACING.xs,
  },
  
  // === FAB ===
  fab: {
    position: 'absolute',
    bottom: Platform.OS === 'android' ? 90 : 80,
    right: SPACING.lg,
    width: 56,
    height: 56,
    borderRadius: 28,
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
  },
  
  fabButton: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default HomeScreen;