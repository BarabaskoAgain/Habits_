// ====================================
// –ü–û–õ–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –° –ü–û–î–î–ï–†–ñ–ö–û–ô –í–ï–°–ê
// src/constants/index.js
// ====================================

// === –¶–í–ï–¢–û–í–´–ï –¢–ï–ú–´ ===
export const THEMES = {
  blue: {
    light: {
      primary: '#2196F3',
      primaryDark: '#1976D2',
      secondary: '#03DAC6',
      background: '#FFFFFF',
      surface: '#F5F5F5',
      card: '#FFFFFF',
      text: '#212121',
      textSecondary: '#757575',
      border: '#E0E0E0',
      success: '#4CAF50',
      warning: '#FF9800',
      error: '#F44336',
      shadow: 'rgba(0,0,0,0.1)'
    },
    dark: {
      primary: '#64B5F6',
      primaryDark: '#42A5F5',
      secondary: '#80CBC4',
      background: '#121212',
      surface: '#1E1E1E',
      card: '#2D2D2D',
      text: '#FFFFFF',
      textSecondary: '#B0B0B0',
      border: '#404040',
      success: '#66BB6A',
      warning: '#FFA726',
      error: '#EF5350',
      shadow: 'rgba(0,0,0,0.3)'
    }
  },
  purple: {
    light: {
      primary: '#9C27B0',
      primaryDark: '#7B1FA2',
      secondary: '#E91E63',
      background: '#FFFFFF',
      surface: '#F5F5F5',
      card: '#FFFFFF',
      text: '#212121',
      textSecondary: '#757575',
      border: '#E0E0E0',
      success: '#4CAF50',
      warning: '#FF9800',
      error: '#F44336',
      shadow: 'rgba(0,0,0,0.1)'
    },
    dark: {
      primary: '#CE93D8',
      primaryDark: '#BA68C8',
      secondary: '#F48FB1',
      background: '#121212',
      surface: '#1E1E1E',
      card: '#2D2D2D',
      text: '#FFFFFF',
      textSecondary: '#B0B0B0',
      border: '#404040',
      success: '#66BB6A',
      warning: '#FFA726',
      error: '#EF5350',
      shadow: 'rgba(0,0,0,0.3)'
    }
  }
};

// === –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê ===
export const TYPOGRAPHY = {
  h1: { fontSize: 32, fontWeight: '700', lineHeight: 40 },
  h2: { fontSize: 28, fontWeight: '600', lineHeight: 36 },
  h3: { fontSize: 24, fontWeight: '600', lineHeight: 32 },
  h4: { fontSize: 20, fontWeight: '500', lineHeight: 28 },
  body: { fontSize: 16, fontWeight: '400', lineHeight: 24 },
  bodyMedium: { fontSize: 14, fontWeight: '400', lineHeight: 20 },
  caption: { fontSize: 12, fontWeight: '400', lineHeight: 16 },
  button: { fontSize: 14, fontWeight: '500', lineHeight: 20 }
};

// === –û–¢–°–¢–£–ü–´ ===
export const SPACING = {
  xs: 4,    // –æ—Å—Ç–∞–≤–∏—Ç—å
  sm: 6,    // –±—ã–ª–æ 8 ‚Üí 6
  md: 12,   // –±—ã–ª–æ 16 ‚Üí 12 
  lg: 18,   // –±—ã–ª–æ 24 ‚Üí 18
  xl: 24,   // –±—ã–ª–æ 32 ‚Üí 24
  xxl: 32,  // –±—ã–ª–æ 48 ‚Üí 32
  xxxl: 48  // –±—ã–ª–æ 64 ‚Üí 48
};

// === –†–ê–î–ò–£–°–´ ===
export const BORDER_RADIUS = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 12,
  xl: 16,
  xxl: 24,
  full: 9999
};

// === –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ò–í–´–ß–ï–ö ===
export const HABIT_CATEGORIES = {
  health: { 
    label: '–ó–¥–æ—Ä–æ–≤—å–µ', 
    icon: 'üíä', 
    color: '#4CAF50'
  },
  fitness: { 
    label: '–§–∏—Ç–Ω–µ—Å', 
    icon: 'üí™', 
    color: '#FF5722'
  },
  learning: { 
    label: '–û–±—É—á–µ–Ω–∏–µ', 
    icon: 'üìö', 
    color: '#2196F3'
  },
  productivity: { 
    label: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 
    icon: '‚ö°', 
    color: '#FF9800'
  },
  mindfulness: { 
    label: '–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å', 
    icon: 'üßò', 
    color: '#673AB7'
  },
  nutrition: { 
    label: '–ü–∏—Ç–∞–Ω–∏–µ', 
    icon: 'ü•ó', 
    color: '#8BC34A'
  }
};

// === –ò–ö–û–ù–ö–ò –ü–†–ò–í–´–ß–ï–ö ===
export const HABIT_ICONS = [
  'üíß', 'üí™', 'üìö', 'üèÉ', 'üßò', 'ü•ó', 'üõå', '‚òÄÔ∏è',
  'üéØ', '‚ö°', 'üé®', 'üéµ', 'üìù', 'üíª', 'üå±', 'üèÜ',
  'üî•', '‚≠ê', 'üíé', 'üöÄ', 'üìñ', 'üñäÔ∏è', 'üíä', 'üçé',
  'üåû', 'üåô', '‚öΩ', 'üèÄ', 'üé∏', 'üìû', 'üí¨', 'üôè',
  'üî¢', 'üìä', 'üìà', '‚è±Ô∏è', '‚è∞', 'ü•õ', 'ü•§', 'üèãÔ∏è',
  '‚öñÔ∏è', 'üìè', 'ü©∫'
];

// === –¶–í–ï–¢–ê –ü–†–ò–í–´–ß–ï–ö ===
export const HABIT_COLORS = [
  '#2196F3', '#4CAF50', '#FF9800', '#9C27B0', '#F44336',
  '#00BCD4', '#8BC34A', '#FF5722', '#673AB7', '#607D8B',
  '#E91E63', '#795548', '#009688', '#3F51B5', '#FFC107'
];

// === –¢–ò–ü–´ –ü–†–ò–í–´–ß–ï–ö ===
export const HABIT_TYPES = {
  boolean: {
    label: '–í—ã–ø–æ–ª–Ω–∏—Ç—å/–ù–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å',
    description: '–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Ç–∏–ø–∞ "–¥–∞/–Ω–µ—Ç"',
    icon: '‚úÖ',
    examples: ['–í—ã–ø–∏—Ç—å –≤–æ–¥—É', '–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É', '–ü–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å']
  },
  number: {
    label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
    description: '–ü—Ä–∏–≤—ã—á–∫–∞ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
    icon: 'üî¢',
    examples: ['10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π', '30 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è', '2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã']
  },
  weight: {
    label: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Å–∞',
    description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–æ–º',
    icon: '‚öñÔ∏è',
    examples: ['–î–æ—Å—Ç–∏—á—å 70 –∫–≥', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å 65 –∫–≥', '–ù–∞–±—Ä–∞—Ç—å –¥–æ 80 –∫–≥']
  }
};

// === –ï–î–ò–ù–ò–¶–´ –ò–ó–ú–ï–†–ï–ù–ò–Ø ===
export const MEASUREMENT_UNITS = {
  // –í—Ä–µ–º—è
  minutes: { label: '–º–∏–Ω—É—Ç', shortLabel: '–º–∏–Ω', type: 'duration', icon: '‚è±Ô∏è' },
  hours: { label: '—á–∞—Å–æ–≤', shortLabel: '—á', type: 'duration', icon: 'üïê' },
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  times: { label: '—Ä–∞–∑', shortLabel: '—Ä–∞–∑', type: 'count', icon: 'üî¢' },
  pieces: { label: '—à—Ç—É–∫', shortLabel: '—à—Ç', type: 'count', icon: 'üìä' },
  pages: { label: '—Å—Ç—Ä–∞–Ω–∏—Ü', shortLabel: '—Å—Ç—Ä', type: 'count', icon: 'üìñ' },
  exercises: { label: '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π', shortLabel: '—É–ø—Ä', type: 'count', icon: 'üí™' },
  games: { label: '–∏–≥—Ä', shortLabel: '–∏–≥—Ä', type: 'count', icon: 'üéÆ' },
  sets: { label: '–ø–æ–¥—Ö–æ–¥–æ–≤', shortLabel: '–ø–æ–¥', type: 'count', icon: 'üèãÔ∏è' },
  
  // –û–±—ä–µ–º
  liters: { label: '–ª–∏—Ç—Ä–æ–≤', shortLabel: '–ª', type: 'volume', icon: 'ü•§' },
  glasses: { label: '—Å—Ç–∞–∫–∞–Ω–æ–≤', shortLabel: '—Å—Ç', type: 'volume', icon: 'ü•õ' },
  
  // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  kilometers: { label: '–∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤', shortLabel: '–∫–º', type: 'distance', icon: 'üõ£Ô∏è' },
  steps: { label: '—à–∞–≥–æ–≤', shortLabel: '—à–∞–≥', type: 'distance', icon: 'üë£' },
  
  // –í–µ—Å
  kg: { label: '–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤', shortLabel: '–∫–≥', type: 'weight', icon: '‚öñÔ∏è' },
  lbs: { label: '—Ñ—É–Ω—Ç–æ–≤', shortLabel: '—Ñ—É–Ω—Ç', type: 'weight', icon: '‚öñÔ∏è' }
};

// === –ö–õ–Æ–ß–ò –•–†–ê–ù–ò–õ–ò–©–ê ===
export const STORAGE_KEYS = {
  habits: '@habits',
  archivedHabits: '@archivedHabits', // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –¢–û–õ–¨–ö–û –≠–¢–û
  achievements: '@achievements',
  settings: '@settings',
  onboarding: '@onboarding_complete'
};

// === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ===
export const DEFAULT_SETTINGS = {
  theme: 'blue',
  isDarkMode: false,
  notifications: {
    reminder: true,
    achievement: true,
    streak: true
  },
  buttonAnimation: {
    enabled: true,
    color: 'primary',
    speed: 1
  },
  weight: {
    unit: 'kg', // kg –∏–ª–∏ lbs
    showBMI: false,
    reminderTime: '20:00' // –≤–µ—á–µ—Ä–Ω–µ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
  }
};

// === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
export const DEFAULT_ACHIEVEMENTS = [
  {
    id: 'first_habit',
    name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É',
    icon: 'üå±',
    type: 'special',
    rarity: 'common',
    requirement: 1
  },
  {
    id: 'streak_7',
    name: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª—é–±—É—é –ø—Ä–∏–≤—ã—á–∫—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üî•',
    type: 'streak',
    rarity: 'common',
    requirement: 7
  },
  {
    id: 'streak_30',
    name: '–ú–µ—Å—è—á–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª—é–±—É—é –ø—Ä–∏–≤—ã—á–∫—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üåü',
    type: 'streak',
    rarity: 'rare',
    requirement: 30
  },
  {
    id: 'completion_50',
    name: '–ü–æ–ª—Å–æ—Ç–Ω–∏',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ 50 —Ä–∞–∑',
    icon: '‚≠ê',
    type: 'completion',
    rarity: 'common',
    requirement: 50
  },
  {
    id: 'quantity_1000',
    name: '–¢—ã—Å—è—á–Ω–∏–∫',
    description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –µ–¥–∏–Ω–∏—Ü –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö',
    icon: 'üìä',
    type: 'quantity',
    rarity: 'rare',
    requirement: 1000
  },
  {
    id: 'weight_tracker',
    name: '–í–µ—Å–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
    description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–µ—Å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: '‚öñÔ∏è',
    type: 'weight_tracking',
    rarity: 'common',
    requirement: 7
  },
  {
    id: 'weight_goal',
    name: '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞',
    icon: 'üéØ',
    type: 'weight_goal',
    rarity: 'rare',
    requirement: 1
  }
];

// === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–ï–°–ê ===
export const WEIGHT_UTILS = {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–∞
  validateWeight: (weight, unit = 'kg') => {
    const numWeight = parseFloat(weight);
    if (isNaN(numWeight) || numWeight <= 0) {
      return '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º';
    }
    
    if (unit === 'kg') {
      if (numWeight < 20 || numWeight > 300) {
        return '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 300 –∫–≥';
      }
    } else if (unit === 'lbs') {
      if (numWeight < 44 || numWeight > 660) {
        return '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 44 –¥–æ 660 —Ñ—É–Ω—Ç–æ–≤';
      }
    }
    
    return null;
  },
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –µ–¥–∏–Ω–∏—Ü–∞–º–∏
  convertWeight: (weight, fromUnit, toUnit) => {
    if (fromUnit === toUnit) return weight;
    
    if (fromUnit === 'kg' && toUnit === 'lbs') {
      return Math.round(weight * 2.20462 * 10) / 10;
    } else if (fromUnit === 'lbs' && toUnit === 'kg') {
      return Math.round(weight / 2.20462 * 10) / 10;
    }
    
    return weight;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–∏
  getWeightStatus: (currentWeight, targetWeight, tolerance = 1) => {
    const diff = Math.abs(currentWeight - targetWeight);
    
    if (diff <= tolerance) {
      return { status: 'on_target', message: '–í –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–∏', color: '#4CAF50' };
    } else if (currentWeight > targetWeight) {
      return { status: 'above_target', message: `+${diff.toFixed(1)} –∫–≥ –æ—Ç —Ü–µ–ª–∏`, color: '#FF9800' };
    } else {
      return { status: 'below_target', message: `-${diff.toFixed(1)} –∫–≥ –æ—Ç —Ü–µ–ª–∏`, color: '#2196F3' };
    }
  },
  
  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å –∑–∞ –ø–µ—Ä–∏–æ–¥
  calculateAverageWeight: (weightData, days = 7) => {
    if (!weightData || weightData.length === 0) return null;
    
    const recentWeights = weightData
      .slice(-days)
      .map(entry => entry.weight)
      .filter(weight => weight > 0);
    
    if (recentWeights.length === 0) return null;
    
    const sum = recentWeights.reduce((acc, weight) => acc + weight, 0);
    return Math.round(sum / recentWeights.length * 10) / 10;
  },
  
  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–Ω–¥ (–Ω–∞–±–æ—Ä/–ø–æ—Ç–µ—Ä—è)
  calculateWeightTrend: (weightData, days = 14) => {
    if (!weightData || weightData.length < 2) return null;
    
    const recentWeights = weightData.slice(-days);
    if (recentWeights.length < 2) return null;
    
    const firstWeight = recentWeights[0].weight;
    const lastWeight = recentWeights[recentWeights.length - 1].weight;
    const change = lastWeight - firstWeight;
    
    return {
      change: Math.round(change * 10) / 10,
      trend: change > 0.1 ? 'gain' : change < -0.1 ? 'loss' : 'stable',
      period: recentWeights.length
    };
  }
};



export default {
  THEMES,
  TYPOGRAPHY,
  SPACING,
  BORDER_RADIUS,
  HABIT_CATEGORIES,
  HABIT_ICONS,
  HABIT_COLORS,
  HABIT_TYPES,
  MEASUREMENT_UNITS,
  STORAGE_KEYS,
  DEFAULT_SETTINGS,
  DEFAULT_ACHIEVEMENTS,
  WEIGHT_UTILS
};