// ====================================
// –§–û–†–ú–ê –°–û–ó–î–ê–ù–ò–Ø –ü–†–ò–í–´–ß–ï–ö - –¢–ï–ö–°–¢–û–í–´–ô –†–ï–ñ–ò–ú
// HabitFormModal.js - –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
// ====================================

import React, { useState, useRef, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Modal,
  StyleSheet,
  Dimensions,
  Alert,
  Animated,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  Vibration,
  Pressable
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';


// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç
import { 
  THEMES, 
  SPACING, 
  BORDER_RADIUS, 
  TYPOGRAPHY,
  HABIT_CATEGORIES,
  HABIT_CATEGORY_TYPES,
  HABIT_ICONS,
  HABIT_ICON_CATEGORIES,
  HABIT_COLORS,
  HABIT_COLOR_CATEGORIES,
  HABIT_TYPES,
  MEASUREMENT_UNITS
} from './constants';

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===
// üéØ –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
const ANIMATION_CONFIG = {
  // –°–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  typing: {
    creation: 35,           // –ü–µ—á–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    editing: 2,            // –ü–µ—á–∞—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    afterEdit: 2,          // –ü–µ—á–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  },

  // –°–∫–æ—Ä–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  deletion: {
    creation: 5,           // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (–±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
    editing: 1,            // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  },

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑
  charsPerTick: {
    creation: {
      min: 1,              // –ú–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      max: 2,             // –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    },
    editing: {
      typing: {            // ‚≠ê –ù–û–í–û–ï: –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        min: 1,
        max: 3,
      },
      deletion: {
        min: 1,            // –ú–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        max: 10,           // –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      }
    },
    afterEdit: {           // ‚≠ê –ù–û–í–û–ï: –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      min: 2,
      max: 8,
    }
  }
};

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const HabitFormModal = ({
  visible,
  habit,
  onSave = () => {},
  onCancel = () => {},
  theme = 'blue',
  isDarkMode = false
}) => {
  // === –°–û–°–¢–û–Ø–ù–ò–ï –§–û–†–ú–´ ===
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    icon: 'üéØ',
    color: '#2196F3',
    category: 'health',
    type: 'boolean',
    targetValue: '1',
    targetWeight: '70',
    weightGoal: 'lose', // lose, gain, maintain
    unit: 'times',
    targetDaysPerWeek: '7',
    reminderTime: '09:00',
    reminderEnabled: true  // –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  });

  // === –°–û–°–¢–û–Ø–ù–ò–ï –°–õ–ê–ô–î–ï–†–ê –¶–í–ï–¢–û–í –ò –ò–ö–û–ù–û–ö ===
const [currentColorCategory, setCurrentColorCategory] = useState(0);
const [currentIconCategory, setCurrentIconCategory] = useState(0);
const [currentCategoryType, setCurrentCategoryType] = useState(0);

  // === –°–û–°–¢–û–Ø–ù–ò–ï –¢–ï–ö–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê ===
  const [currentField, setCurrentField] = useState(null);
  const [completedFields, setCompletedFields] = useState(new Set());
  const [showFieldSelector, setShowFieldSelector] = useState(false);
  
  // –ï–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è
  const [fullText, setFullText] = useState('');
  const [displayedText, setDisplayedText] = useState('');
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(false);
  
  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteTargetIndex, setDeleteTargetIndex] = useState(0);
  const [pendingCompletedFields, setPendingCompletedFields] = useState(null);
  
  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ
  const [fieldPositions, setFieldPositions] = useState({});
  const [textParts, setTextParts] = useState([]);

// üÜï –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: —Ñ–ª–∞–≥ –ø–µ—á–∞—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [isAfterEdit, setIsAfterEdit] = useState(false);

  // üéØ –ù–û–í–´–ô –§–õ–ê–ì: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [justOpenedEditModal, setJustOpenedEditModal] = useState(false);

  // === –ê–ù–ò–ú–ê–¶–ò–ò ===
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const scaleAnim = useRef(new Animated.Value(1)).current;

  // === –†–ï–§–´ –î–õ–Ø PICKER'–û–í –í–†–ï–ú–ï–ù–ò ===
  const hoursScrollRef = useRef(null);
  const minutesScrollRef = useRef(null);

  // == –†–ï–§ –î–õ–Ø –¢–ò–ü–û–í –ü–†–ò–í–´–ß–ï–ö ==
  const categoryScrollRef = useRef(null); // –°–ö–†–û–õ–õ –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô
const colorScrollRef = useRef(null); // –°–ö–†–û–õ –î–õ–Ø –¶–í–ï–¢–û–í

  const colors = THEMES[theme] ? THEMES[theme][isDarkMode ? 'dark' : 'light'] : THEMES.blue.light;

  // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê ===
  const generateTextParts = useCallback(() => {
    const parts = [];
    
    // –ù–∞—á–∞–ª–æ
    parts.push({ type: 'text', content: '–Ø —Ö–æ—á—É –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å –ø—Ä–∏–≤—ã—á–∫—É ' });
parts.push({ type: 'field', field: 'name', placeholder: '[–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏]', value: formData.name });

if (completedFields.has('name')) {
  parts.push({ type: 'text', content: '.\n' });
  parts.push({ type: 'text', content: '–ó–∞—á–µ–º –º–Ω–µ —ç—Ç–æ –Ω—É–∂–Ω–æ: ' });
  parts.push({ type: 'field', field: 'description', placeholder: '[–æ–ø–∏—Å–∞–Ω–∏–µ/–º–æ—Ç–∏–≤–∞—Ü–∏—è]', value: formData.description });
}

if (completedFields.has('description')) {
  parts.push({ type: 'text', content: '.\n–≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' });
  parts.push({ type: 'field', field: 'category', placeholder: '[–∫–∞—Ç–µ–≥–æ—Ä–∏—è]', value: HABIT_CATEGORIES[formData.category]?.label });
  parts.push({ type: 'text', content: '.\n' });
}
    
    if (completedFields.has('category')) {
      parts.push({ type: 'text', content: '–≠—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ —Ç–∏–ø–∞ ' });
      parts.push({ type: 'field', field: 'type', placeholder: '[—Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è]', value: HABIT_TYPES[formData.type]?.label });
      parts.push({ type: 'text', content: '.\n' });
    }
    
    if (completedFields.has('type')) {
      if (formData.type === 'boolean') {
        parts.push({ type: 'text', content: '–Ø –±—É–¥—É –æ—Ç–º–µ—á–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—é.\n' });
      } else if (formData.type === 'number') {
        parts.push({ type: 'text', content: '–ú–æ—è —Ü–µ–ª—å - ' });
        parts.push({ type: 'field', field: 'details', placeholder: '[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü–∞]', value: `${formData.targetValue} ${MEASUREMENT_UNITS[formData.unit]?.label || ''}` });
        if (completedFields.has('details')) {
          parts.push({ type: 'text', content: ' –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n' });
        }
      } else if (formData.type === 'weight') {
        parts.push({ type: 'text', content: '–Ø —Ö–æ—á—É ' });
        parts.push({ 
          type: 'field', 
          field: 'weightGoal', 
          placeholder: '[—Ü–µ–ª—å]', 
          value: formData.weightGoal === 'lose' ? '—Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å –¥–æ' : 
                 formData.weightGoal === 'gain' ? '–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å –¥–æ' : 
                 '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å'
        });
        if (formData.weightGoal !== 'maintain') {
          parts.push({ type: 'text', content: ' ' });
          parts.push({ type: 'field', field: 'details', placeholder: '[–≤–µ—Å]', value: `${formData.targetWeight} –∫–≥` });
        }
        if (completedFields.has('weightGoal') && (formData.weightGoal === 'maintain' || completedFields.has('details'))) {
          parts.push({ type: 'text', content: '.\n' });
        }
      }
    }
    
    // –ß–∞—Å—Ç–æ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    const shouldShowFrequency = 
      (formData.type === 'boolean' && completedFields.has('type')) ||
      (formData.type === 'number' && completedFields.has('details')) ||
      (formData.type === 'weight' && completedFields.has('weightGoal') && (formData.weightGoal === 'maintain' || completedFields.has('details')));
    
    if (shouldShowFrequency) {
      if (formData.type === 'weight') {
        parts.push({ type: 'text', content: '–Ø –ø–ª–∞–Ω–∏—Ä—É—é –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è ' });
      } else {
        parts.push({ type: 'text', content: '–Ø –ø–ª–∞–Ω–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É ' });
      }
      parts.push({ 
        type: 'field', 
        field: 'frequency', 
        placeholder: '[—á–∞—Å—Ç–æ—Ç–∞]', 
        value: formData.targetDaysPerWeek === '7' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : `${formData.targetDaysPerWeek} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é`
      });
      if (completedFields.has('frequency')) {
        parts.push({ type: 'text', content: '.\n' });
      }
    }
    
    // –¶–≤–µ—Ç - –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if (completedFields.has('frequency')) {
      parts.push({ type: 'text', content: '–ú–æ—è –ø—Ä–∏–≤—ã—á–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å ' });
      parts.push({ type: 'field', field: 'color', placeholder: '[—Ü–≤–µ—Ç]', value: '–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç' });
      if (completedFields.has('color')) {
        parts.push({ type: 'text', content: '.\n' });
      }
    }
    
    // –ò–∫–æ–Ω–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if (completedFields.has('color')) {
      parts.push({ type: 'text', content: '–ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏: ' });
      parts.push({ type: 'field', field: 'icon', placeholder: '[–∏–∫–æ–Ω–∫–∞]', value: formData.icon });
      if (completedFields.has('icon')) {
        parts.push({ type: 'text', content: '.\n' });
      }
    }
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if (completedFields.has('icon')) {
      parts.push({ type: 'text', content: '–ü—Ä–æ—à—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –º–Ω–µ –≤ ' });
      parts.push({ type: 'field', field: 'reminder', placeholder: '[–≤—Ä–µ–º—è]', value: formData.reminderTime });
      if (completedFields.has('reminder')) {
        parts.push({ type: 'text', content: ' –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n' });
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if (completedFields.has('reminder')) {
      parts.push({ type: 'text', content: '‚úçÔ∏è –Ø –≥–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π –∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞.' });
    }
    
    return parts;
  }, [formData, completedFields]);

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
  const findDeletePosition = useCallback((field) => {
    let position = 0;
    let foundField = false;
    
    for (const part of textParts) {
      if (part.type === 'text' && !foundField) {
        position += part.content.length;
      } else if (part.type === 'field' && part.field === field) {
        foundField = true;
        break;
      }
    }
    
    return position;
  }, [textParts]);

useEffect(() => {
    if (visible) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
        Animated.spring(slideAnim, {
          toValue: 0,
          tension: 50,
          friction: 8,
          useNativeDriver: true,
        })
      ]).start();

      // –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
      const parts = generateTextParts();
      setTextParts(parts);

      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
      let text = '';
      parts.forEach(part => {
        if (part.type === 'text') {
          text += part.content;
        }
      });

      // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (habit) {
        setJustOpenedEditModal(true);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
      setFullText(text);
      setIsTyping(true);

    } else {
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      resetForm();
    }
  }, [visible, habit]);

// === üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢ –ü–ï–ß–ê–¢–ê–ù–ò–Ø ===
useEffect(() => {
  if (isTyping && currentCharIndex < fullText.length) {
    // --- üéØ –ú–ì–ù–û–í–ï–ù–ù–û —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    if (justOpenedEditModal) {
      setDisplayedText(fullText);
      setCurrentCharIndex(fullText.length);
      setIsTyping(false);
      setJustOpenedEditModal(false);  // –°–ë–†–ê–°–´–í–ê–ï–ú
      return;
    }

    // --- –î–∞–ª—å—à–µ –æ–±—ã—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è ---
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
    let typingSpeed;
    if (isAfterEdit) {
      // –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ —Å–æ–∑–¥–∞–Ω–∏—è
      typingSpeed = ANIMATION_CONFIG.typing.afterEdit;
    } else if (habit) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–∏–≤—ã—á–∫–∏
      typingSpeed = ANIMATION_CONFIG.typing.editing;
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      typingSpeed = ANIMATION_CONFIG.typing.creation;
    }

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑
let charsToAdd;
let config;

if (habit && !isAfterEdit) {
  // –ü—Ä–∏ –æ–±—ã—á–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  config = ANIMATION_CONFIG.charsPerTick.editing.typing;
} else if (isAfterEdit) {
  // –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  config = ANIMATION_CONFIG.charsPerTick.afterEdit;
} else {
  // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
  config = ANIMATION_CONFIG.charsPerTick.creation;
}

charsToAdd = Math.floor(Math.random() * (config.max - config.min + 1)) + config.min;

    const timeout = setTimeout(() => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
      const remainingChars = fullText.length - currentCharIndex;
      const actualCharsToAdd = Math.min(charsToAdd, remainingChars);

      setDisplayedText(prev => prev + fullText.substr(currentCharIndex, actualCharsToAdd));
      setCurrentCharIndex(prev => prev + actualCharsToAdd);
    }, typingSpeed);

    return () => clearTimeout(timeout);
  } else if (currentCharIndex >= fullText.length) {
    setIsTyping(false);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏
    if (isAfterEdit) {
      setIsAfterEdit(false);
    }
  }
}, [currentCharIndex, fullText, isTyping, habit, isAfterEdit, justOpenedEditModal]);

  // === üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢ –£–î–ê–õ–ï–ù–ò–Ø ===
  useEffect(() => {
    if (isDeleting && displayedText.length > deleteTargetIndex) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
      let deleteSpeed;
      if (habit) {
        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        deleteSpeed = ANIMATION_CONFIG.deletion.editing;
      } else {
        // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - –æ–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        deleteSpeed = ANIMATION_CONFIG.deletion.creation;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
      let charsToDelete;
      if (habit) {
        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
        const config = ANIMATION_CONFIG.charsPerTick.editing.deletion;
        charsToDelete = Math.floor(Math.random() * (config.max - config.min + 1)) + config.min;
      } else {
        // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏
        const config = ANIMATION_CONFIG.charsPerTick.creation;
        charsToDelete = Math.floor(Math.random() * (config.max - config.min + 1)) + config.min;
      }

      const timeout = setTimeout(() => {
        // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å
        const currentLength = displayedText.length;
        const charsCanDelete = currentLength - deleteTargetIndex;
        const actualCharsToDelete = Math.min(charsToDelete, charsCanDelete);

        setDisplayedText(prev => prev.slice(0, -actualCharsToDelete));
      }, deleteSpeed);

      return () => clearTimeout(timeout);
    } else if (isDeleting && displayedText.length <= deleteTargetIndex) {
      setIsDeleting(false);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (pendingCompletedFields) {
        setCompletedFields(pendingCompletedFields);
        setPendingCompletedFields(null);
      }
    }
  }, [isDeleting, displayedText.length, deleteTargetIndex, pendingCompletedFields, habit]);

// === üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –≠–§–§–ï–ö–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ö–°–¢–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø ===
useEffect(() => {
  if (!isDeleting && !isTyping && displayedText.length === deleteTargetIndex && deleteTargetIndex > 0) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å
    const parts = generateTextParts();
    setTextParts(parts);

    let newFullText = '';
    parts.forEach(part => {
      if (part.type === 'text') {
        newFullText += part.content;
      }
    });

    setFullText(newFullText);
    setCurrentCharIndex(deleteTargetIndex);

    // üéØ –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏
    if (habit) {
      setIsAfterEdit(true);
    }

    setIsTyping(true);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º deleteTargetIndex –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    setDeleteTargetIndex(0);
  }
}, [isDeleting, isTyping, displayedText.length, deleteTargetIndex, generateTextParts, habit]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (isDeleting && pendingCompletedFields) {
      return;
    }
    
    const parts = generateTextParts();
    setTextParts(parts);
    
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –∏ –Ω–µ —É–¥–∞–ª—è–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (!isTyping && !isDeleting) {
      let newFullText = '';
      let positions = {};
      let currentPos = 0;
      
      parts.forEach(part => {
        if (part.type === 'text') {
          newFullText += part.content;
          currentPos += part.content.length;
        } else if (part.type === 'field') {
          positions[part.field] = {
            start: currentPos,
            end: currentPos
          };
        }
      });
      
      setFieldPositions(positions);
      
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ —Å—Ç–∞—Ä–æ–≥–æ, –ø–µ—á–∞—Ç–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
      if (newFullText.length > fullText.length) {
        const addedText = newFullText.substring(fullText.length);
        setFullText(newFullText);
        setIsTyping(true);
      }
    }
  }, [formData, completedFields, isTyping, isDeleting, fullText, generateTextParts, pendingCompletedFields]);

  useEffect(() => {
    if (habit) {
      // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setFormData({
        name: habit.name || '',
        description: habit.description || '',
        icon: habit.icon || 'üéØ',
        color: habit.color || '#2196F3',
        category: habit.category || 'health',
        type: habit.type || 'boolean',
        targetValue: habit.targetValue?.toString() || '1',
        targetWeight: habit.targetWeight?.toString() || '70',
        weightGoal: habit.weightGoal || 'lose',
        unit: habit.unit || 'times',
        targetDaysPerWeek: habit.targetDaysPerWeek?.toString() || '7',
        reminderTime: habit.reminderTime || '09:00',
        reminderEnabled: habit.reminderEnabled !== false  // –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      });


// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
const fieldsToMark = ['name', 'description', 'category', 'type', 'frequency', 'color', 'icon', 'reminder'];
      if (habit.type === 'number' || habit.type === 'weight') {
        fieldsToMark.push('details');
      }
      if (habit.type === 'weight') {
        fieldsToMark.push('weightGoal');
      }
      setCompletedFields(new Set(fieldsToMark));
    }
  }, [habit]);

  // === –§–£–ù–ö–¶–ò–ò ===
  const getCurrentFieldValue = (field) => {
    switch (field) {
      case 'name':
        return formData.name;
        case 'description':
  return formData.description;
      case 'category':
        return formData.category;
      case 'type':
        return formData.type;
      case 'weightGoal':
        return formData.weightGoal;
      case 'details':
        if (formData.type === 'number') {
          return `${formData.targetValue}_${formData.unit}`; // –°–æ—Å—Ç–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        } else if (formData.type === 'weight') {
          return formData.targetWeight;
        }
        return '';
      case 'frequency':
        return formData.targetDaysPerWeek;
      case 'color':
        return formData.color;
      case 'icon':
        return formData.icon;
      case 'reminder':
        return formData.reminderTime;
      default:
        return '';
    }
  };

// === –≠–§–§–ï–ö–¢ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ò–í–´–ß–ö–ò ===
useEffect(() => {
  if (habit) {
    // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setFormData({
      name: habit.name || '',
      description: habit.description || '',
      icon: habit.icon || 'üéØ',
      color: habit.color || '#2196F3',
      category: habit.category || 'health',
      type: habit.type || 'boolean',
      targetValue: habit.targetValue?.toString() || '1',
      targetWeight: habit.targetWeight?.toString() || '70',
      weightGoal: habit.weightGoal || 'lose',
      unit: habit.unit || 'times',
      targetDaysPerWeek: habit.targetDaysPerWeek?.toString() || '7',
      reminderTime: habit.reminderTime || '09:00',
      reminderEnabled: habit.reminderEnabled !== false
    });

    // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const fieldsToMark = ['name', 'description', 'category', 'type', 'frequency', 'color', 'icon', 'reminder'];
    if (habit.type === 'number' || habit.type === 'weight') {
      fieldsToMark.push('details');
    }
    if (habit.type === 'weight') {
      fieldsToMark.push('weightGoal');
    }
    setCompletedFields(new Set(fieldsToMark));
  }
}, [habit]);

// === –ú–ì–ù–û–í–ï–ù–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –°–ö–†–û–õ–õ–ò–ù–ì–ê ===
useEffect(() => {
  if (currentField === 'reminder' && showFieldSelector) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–Ω–¥–µ—Ä–æ–º
    requestAnimationFrame(() => {
      const [hours, minutes] = formData.reminderTime.split(':');
      const minutesArray = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —á–∞—Å–æ–≤
      if (hoursScrollRef.current) {
        const hourIndex = parseInt(hours);
        const scrollView = hoursScrollRef.current;

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        scrollView.scrollTo({
          y: hourIndex * 40,
          animated: false
        });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –º–∏–Ω—É—Ç
      if (minutesScrollRef.current) {
        const minuteIndex = minutesArray.indexOf(parseInt(minutes));
        if (minuteIndex !== -1) {
          const scrollView = minutesScrollRef.current;

          // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
          scrollView.scrollTo({
            y: minuteIndex * 40,
            animated: false
          });
        }
      }
    });
  }
}, [currentField, showFieldSelector, formData.reminderTime]);

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      icon: 'üéØ',
      color: '#2196F3',
      category: 'health',
      type: 'boolean',
      targetValue: '1',
      targetWeight: '70',
      weightGoal: 'lose',
      unit: 'times',
      targetDaysPerWeek: '7',
      reminderTime: '09:00'
    });
    setCurrentField(null);
    setCompletedFields(new Set());
    setShowFieldSelector(false);
    setFullText('');
    setDisplayedText('');
    setCurrentCharIndex(0);
    setIsTyping(false);
    setIsDeleting(false);
    setDeleteTargetIndex(0);
    setPendingCompletedFields(null);
    setIsAfterEdit(false); // üÜï –°–±—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setTextParts([]);
    setFieldPositions({});
  };

const handleFieldClick = (field) => {
  if (!isTyping && !isDeleting) {
    setCurrentField(field);
    // –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä, –Ω–µ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç
    setShowFieldSelector(true);
  }
  Platform.OS === 'ios' && Vibration.vibrate(10);
};

const handleFieldSelect = (value, additionalData = {}) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
  const currentValue = getCurrentFieldValue(currentField);
  let isValueChanged = false;
  
  if (currentField === 'details' && formData.type === 'number') {
    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏ –µ–¥–∏–Ω–∏—Ü—É
    const currentDetailsValue = `${formData.targetValue}_${formData.unit}`;
    const newDetailsValue = `${value}_${additionalData.unit || formData.unit}`;
    isValueChanged = currentDetailsValue !== newDetailsValue;
  } else {
    isValueChanged = currentValue !== value;
  }
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π
  let newCompletedFields = new Set(completedFields);
  newCompletedFields.add(currentField);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
  Object.keys(additionalData).forEach(key => {
    newCompletedFields.add(key);
  });
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª—å "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", –ø–æ–º–µ—á–∞–µ–º details –∫–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  if (currentField === 'weightGoal' && value === 'maintain') {
    newCompletedFields.add('details');
  }
  
  // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏ –ø–æ–ª–µ –±—ã–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
  if (isValueChanged && completedFields.has(currentField)) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const deletePosition = findDeletePosition(currentField);
    setDeleteTargetIndex(deletePosition);
    setIsDeleting(true);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
const fieldsOrder = ['name', 'description', 'category', 'type', 'weightGoal', 'details', 'frequency', 'color', 'icon', 'reminder'];
    const clickedFieldIndex = fieldsOrder.indexOf(currentField);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const fieldsAfterDeletion = new Set();
    fieldsOrder.forEach((f, index) => {
      if (index < clickedFieldIndex && completedFields.has(f)) {
        fieldsAfterDeletion.add(f);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    fieldsAfterDeletion.add(currentField);
    Object.keys(additionalData).forEach(key => {
      fieldsAfterDeletion.add(key);
    });
    if (currentField === 'weightGoal' && value === 'maintain') {
      fieldsAfterDeletion.add('details');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    setPendingCompletedFields(fieldsAfterDeletion);
  } else {
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å—Ä–∞–∑—É
    setCompletedFields(newCompletedFields);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const newFormData = { ...formData, [currentField]: value, ...additionalData };
  setFormData(newFormData);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
  setShowFieldSelector(false);
  setCurrentField(null);
  
  // –í–∏–±—Ä–∞—Ü–∏—è
  if (Platform.OS === 'ios') {
    Vibration.vibrate(10);
  }
};

  const handleSave = () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
      return;
    }
    
    const habitData = {
      name: formData.name.trim(),
  description: (formData.description || '').trim(), // –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞!
      icon: formData.icon,
      color: formData.color,
      category: formData.category,
      type: formData.type,
      targetValue: formData.type === 'number' ? parseInt(formData.targetValue) || 1 : undefined,
      targetWeight: formData.type === 'weight' ? parseFloat(formData.targetWeight) || 70 : undefined,
      weightGoal: formData.type === 'weight' ? formData.weightGoal : undefined,
            unit: formData.type === 'number' ? formData.unit : undefined,
      reminderEnabled: formData.reminderEnabled,  // –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      targetDaysPerWeek: parseInt(formData.targetDaysPerWeek) || 7,
      reminderTime: formData.reminderTime
    };
    
    onSave(habitData);
    Platform.OS === 'ios' && Vibration.vibrate(20);
  };

  // === –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ï–ù–î–ï–†–ê ===
  const renderHabitPreview = () => (
    <Animated.View style={[
      styles.previewContainer,
      { 
        backgroundColor: colors.surface,
        borderColor: colors.border,
        opacity: fadeAnim,
        transform: [
          { translateY: slideAnim },
          { scale: scaleAnim }
        ]
      }
    ]}>
      <Text style={[styles.previewTitle, { color: colors.text }]}>
        –ü—Ä–µ–≤—å—é –≤–∞—à–µ–π –ø—Ä–∏–≤—ã—á–∫–∏:
      </Text>
      
      <View style={[
        styles.previewCard,
        { 
          backgroundColor: colors.background,
          borderColor: formData.color || colors.border
        }
      ]}>
        <View style={styles.previewHeader}>
          <Text style={styles.previewIcon}>{formData.icon || 'üéØ'}</Text>
          <View style={styles.previewInfo}>
            <Text style={[styles.previewName, { color: colors.text }]}>
              {formData.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏'}
            </Text>
         {formData.description && (
  <Text style={[styles.previewDescription, { color: colors.textSecondary }]} numberOfLines={2}>
    {formData.description}
  </Text>
)}   
            <View style={styles.previewMeta}>
              <Text style={[styles.previewType, { color: colors.textSecondary }]}>
                {HABIT_TYPES[formData.type]?.label || '–¢–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏'}
              </Text>
              {formData.type === 'number' && formData.targetValue && (
                <Text style={[styles.previewTarget, { color: colors.textSecondary }]}>
                  ‚Ä¢ –¶–µ–ª—å: {formData.targetValue} {MEASUREMENT_UNITS[formData.unit]?.shortLabel || ''}
                </Text>
              )}
              {formData.type === 'weight' && (
                <Text style={[styles.previewTarget, { color: colors.textSecondary }]}>
                  ‚Ä¢ {formData.weightGoal === 'lose' ? '–°–Ω–∏–∑–∏—Ç—å –¥–æ' : 
                     formData.weightGoal === 'gain' ? '–ù–∞–±—Ä–∞—Ç—å –¥–æ' : 
                     '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å'} {formData.weightGoal !== 'maintain' && formData.targetWeight ? `${formData.targetWeight} –∫–≥` : ''}
                </Text>
              )}
            </View>
          </View>
        </View>
        
        <View style={styles.previewFooter}>
          <View style={[styles.previewBadge, { backgroundColor: colors.surface }]}>
            <Ionicons name="calendar-outline" size={12} color={colors.textSecondary} />
            <Text style={[styles.previewBadgeText, { color: colors.textSecondary }]}>
              {formData.targetDaysPerWeek}/7 –¥–Ω–µ–π
            </Text>
          </View>
          <View style={[styles.previewBadge, { backgroundColor: colors.surface }]}>
            <Ionicons name="time-outline" size={12} color={colors.textSecondary} />
            <Text style={[styles.previewBadgeText, { color: colors.textSecondary }]}>
              {formData.reminderTime}
            </Text>
          </View>
        </View>
      </View>
    </Animated.View>
  );

  const renderTextContent = () => {
    let charCount = 0;
    const elements = [];
    let currentLineElements = [];
    
    textParts.forEach((part, index) => {
      if (part.type === 'text') {
        const start = charCount;
        const end = charCount + part.content.length;
        charCount = end;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        const visibleText = displayedText.substring(start, Math.min(end, displayedText.length));
        
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
        const lines = visibleText.split('\n');
        lines.forEach((line, lineIndex) => {
          if (line) {
            currentLineElements.push(
              <Text key={`${index}-${lineIndex}`} style={[styles.textLine, { color: colors.text }]}>
                {line}
              </Text>
            );
          }
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É—Å—Ç–æ–≥–æ)
          if (lineIndex < lines.length - 1 || (lineIndex === lines.length - 1 && !line)) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (currentLineElements.length > 0) {
              elements.push(
                <View key={`line-${elements.length}`} style={styles.textLineWrapper}>
                  {currentLineElements}
                </View>
              );
              currentLineElements = [];
            }
          }
        });
      } else if (part.type === 'field') {
        const isCompleted = completedFields.has(part.field);
        const shouldShow = charCount <= displayedText.length;
        
        if (!shouldShow && !isCompleted) {
          return;
        }
        
        currentLineElements.push(
          <TouchableOpacity 
            key={index}
            onPress={() => handleFieldClick(part.field)}
            activeOpacity={0.7}
            style={styles.fieldWrapper}
          >
            <Text style={[
              styles.textField,
              isCompleted ? styles.textFieldCompleted : styles.textFieldEmpty,
              { color: isCompleted ? formData.color : colors.primary }
            ]}>
              {isCompleted ? part.value : part.placeholder}
            </Text>
          </TouchableOpacity>
        );
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentLineElements.length > 0) {
      elements.push(
        <View key={`line-${elements.length}`} style={styles.textLineWrapper}>
          {currentLineElements}
        </View>
      );
    }
    
    return (
      <ScrollView 
        style={styles.textContainer}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.textWrapper}>
          {elements}
        </View>
      </ScrollView>
    );
  };

  const renderFieldSelector = () => {
    if (!showFieldSelector || !currentField) return null;
    
    return (
      <View style={[styles.selectorOverlay, { backgroundColor: colors.background + 'F0' }]}>
        <TouchableOpacity 
          style={styles.selectorBackdrop}
          onPress={() => setShowFieldSelector(false)}
          activeOpacity={1}
        />
        
        <Animated.View style={[
          styles.selectorContainer,
          { 
            backgroundColor: colors.surface,
            borderColor: colors.border
          }
        ]}>
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è */}
          {currentField === 'name' && (
            <View style={styles.selectorContent}>
              <Text style={[styles.selectorTitle, { color: colors.text }]}>
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
              </Text>
              <TextInput
                style={[
                  styles.nameInput,
                  {
                    backgroundColor: colors.background,
                    borderColor: colors.border,
                    color: colors.text
                  }
                ]}
                value={formData.name}
                onChangeText={(text) => setFormData({ ...formData, name: text })}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–∏—Ç—å –≤–æ–¥—É"
                placeholderTextColor={colors.textSecondary}
                autoFocus
                maxLength={50}
              />
              <TouchableOpacity
                style={[styles.selectorButton, { backgroundColor: colors.primary }]}
                onPress={() => formData.name.trim() && handleFieldSelect(formData.name)}
              >
                <Text style={styles.selectorButtonText}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          )}
{/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è */}
{currentField === 'description' && (
  <View style={styles.selectorContent}>
    <Text style={[styles.selectorTitle, { color: colors.text }]}>
      –ó–∞—á–µ–º –≤–∞–º —ç—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞?
    </Text>
    <Text style={[styles.selectorSubtitle, { color: colors.textSecondary }]}>
      –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏–ª–∏ —Ü–µ–ª—å
    </Text>
    <TextInput
      style={[
        styles.descriptionInput,
        {
          backgroundColor: colors.background,
          borderColor: colors.border,
          color: colors.text
        }
      ]}
      value={formData.description}
      onChangeText={(text) => setFormData({ ...formData, description: text })}
      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É —É–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ"
      placeholderTextColor={colors.textSecondary}
      multiline
      numberOfLines={3}
      autoFocus
    />
    <TouchableOpacity
      style={[styles.selectorButton, { backgroundColor: colors.primary }]}
      onPress={() => handleFieldSelect(formData.description)}
    >
      <Text style={styles.selectorButtonText}>–ì–æ—Ç–æ–≤–æ</Text>
    </TouchableOpacity>
  </View>
)}
        
 {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
 {currentField === 'category' && (
   <View style={styles.selectorContent}>
     <Text style={[styles.selectorTitle, { color: colors.text }]}>
       –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     </Text>
     <Text style={[styles.selectorSubtitle, { color: colors.textSecondary }]}>
       –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     </Text>

     {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
     <View style={[styles.categorySliderHeader, { backgroundColor: colors.primary + '15' }]}>
       <Text style={styles.categoryTypeIcon}>
         {Object.values(HABIT_CATEGORY_TYPES)[currentCategoryType]?.icon}
       </Text>
       <Text style={[styles.categorySliderTitle, { color: colors.text }]}>
         {Object.values(HABIT_CATEGORY_TYPES)[currentCategoryType]?.label}
       </Text>
     </View>

     {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞ –°–û –°–í–ê–ô–ü–ê–ú–ò */}
     <View style={styles.categorySliderContainer}>
       <ScrollView
         horizontal
         pagingEnabled
         showsHorizontalScrollIndicator={false}
        snapToInterval={SCREEN_WIDTH * 0.9 - 32} // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (90% —à–∏—Ä–∏–Ω—ã) –º–∏–Ω—É—Å padding selectorContent (16*2=32)
         decelerationRate="fast"
         contentContainerStyle={styles.categoryScrollContent}
      onMomentumScrollEnd={(event) => {
        const offsetX = event.nativeEvent.contentOffset.x;
        const pageWidth = SCREEN_WIDTH * 0.9 - 32;        const newIndex = Math.round(offsetX / pageWidth);
        const maxIndex = Object.keys(HABIT_CATEGORY_TYPES).length - 1;
        const clampedIndex = Math.max(0, Math.min(newIndex, maxIndex));

        if (clampedIndex !== currentCategoryType) {
          setCurrentCategoryType(clampedIndex);
        }
      }}
         ref={categoryScrollRef}
       >
         {Object.values(HABIT_CATEGORY_TYPES).map((categoryGroup, groupIndex) => (
           <View
             key={groupIndex}
           style={[
             styles.categorySliderContent,
             { width: SCREEN_WIDTH * 0.9 - 32 }           ]}
           >
             <View style={styles.categoriesGrid}>
               {categoryGroup.categories.map(categoryKey => {
                 const category = HABIT_CATEGORIES[categoryKey];
                 return (
                   <TouchableOpacity
                     key={categoryKey}
                     style={[
                       styles.categoryOptionCompact,
                       {
                         backgroundColor: colors.background,
                         borderColor: colors.border
                       }
                     ]}
                     onPress={() => handleFieldSelect(categoryKey)}
                   >
                     <Text style={styles.categoryIcon}>{category.icon}</Text>
                     <View style={styles.categoryInfo}>
                       <Text style={[styles.categoryName, { color: colors.text }]}>
                         {category.label}
                       </Text>
                       <Text style={[styles.categoryDescription, { color: colors.textSecondary }]}>
                         {category.description}
                       </Text>
                     </View>
                   </TouchableOpacity>
                 );
               })}
             </View>
           </View>
         ))}
       </ScrollView>
     </View>

     {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ) */}
     <View style={styles.categorySliderIndicators}>
       {Object.keys(HABIT_CATEGORY_TYPES).map((_, index) => (
         <TouchableOpacity
           key={index}
           style={[
             styles.categorySliderDot,
             {
               backgroundColor: index === currentCategoryType
                 ? colors.primary
                 : colors.border
             }
           ]}
      onPress={() => {
        // –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const pageWidth = SCREEN_WIDTH * 0.9 - 32;
        categoryScrollRef.current?.scrollTo({
          x: index * pageWidth,
          animated: true
        });
        setCurrentCategoryType(index);
      }}
         />
       ))}
     </View>
   </View>
 )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–∏–ø–∞ */}
          {currentField === 'type' && (
            <View style={styles.selectorContent}>
              <Text style={[styles.selectorTitle, { color: colors.text }]}>
                –ö–∞–∫ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?
              </Text>
              <ScrollView showsVerticalScrollIndicator={false}>
                {Object.entries(HABIT_TYPES).map(([key, type]) => (
                  <TouchableOpacity
                    key={key}
                    style={[
                      styles.typeOption,
                      {
                        backgroundColor: colors.background,
                        borderColor: colors.border
                      }
                    ]}
                    onPress={() => handleFieldSelect(key)}
                  >
                    <Text style={styles.typeIcon}>{type.icon}</Text>
                    <View style={styles.typeInfo}>
                      <Text style={[styles.typeName, { color: colors.text }]}>
                        {type.label}
                      </Text>
                      <Text style={[styles.typeDescription, { color: colors.textSecondary }]}>
                        {type.description}
                      </Text>
                    </View>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–≤–µ—Å) */}
          {currentField === 'details' && (
            <View style={styles.selectorContent}>
              {formData.type === 'number' && (
                <>
                  <Text style={[styles.selectorTitle, { color: colors.text }]}>
                    –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å
                  </Text>
                  <View style={styles.detailsInputs}>
                    <TextInput
                      style={[
                        styles.valueInput,
                        {
                          backgroundColor: colors.background,
                          borderColor: colors.border,
                          color: colors.text
                        }
                      ]}
                      value={formData.targetValue}
                      onChangeText={(text) => setFormData({ ...formData, targetValue: text })}
                      placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                      placeholderTextColor={colors.textSecondary}
                      keyboardType="numeric"
                      autoFocus
                    />
                    <ScrollView 
                      style={styles.unitSelector}
                      horizontal
                      showsHorizontalScrollIndicator={false}
                    >
                      {Object.entries(MEASUREMENT_UNITS).map(([key, unit]) => (
                        <TouchableOpacity
                          key={key}
                          style={[
                            styles.unitOption,
                            {
                              backgroundColor: formData.unit === key ? colors.primary : colors.background,
                              borderColor: formData.unit === key ? colors.primary : colors.border
                            }
                          ]}
                          onPress={() => setFormData({ ...formData, unit: key })}
                        >
                          <Text style={[
                            styles.unitText,
                            { color: formData.unit === key ? '#ffffff' : colors.text }
                          ]}>
                            {unit.label}
                          </Text>
                        </TouchableOpacity>
                      ))}
                    </ScrollView>
                  </View>
                  <TouchableOpacity
                    style={[styles.selectorButton, { backgroundColor: colors.primary }]}
                    onPress={() => formData.targetValue && handleFieldSelect(formData.targetValue, { unit: formData.unit })}
                  >
                    <Text style={styles.selectorButtonText}>–ì–æ—Ç–æ–≤–æ</Text>
                  </TouchableOpacity>
                </>
              )}
              
              {formData.type === 'weight' && (
                <>
                  <Text style={[styles.selectorTitle, { color: colors.text }]}>
                    –¶–µ–ª–µ–≤–æ–π –≤–µ—Å (–∫–≥)
                  </Text>
                  <TextInput
                    style={[
                      styles.weightInput,
                      {
                        backgroundColor: colors.background,
                        borderColor: colors.border,
                        color: colors.text
                      }
                    ]}
                    value={formData.targetWeight}
                    onChangeText={(text) => setFormData({ ...formData, targetWeight: text })}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 70"
                    placeholderTextColor={colors.textSecondary}
                    keyboardType="numeric"
                    autoFocus
                  />
                  <TouchableOpacity
                    style={[styles.selectorButton, { backgroundColor: colors.primary }]}
                    onPress={() => formData.targetWeight && handleFieldSelect(formData.targetWeight)}
                  >
                    <Text style={styles.selectorButtonText}>–ì–æ—Ç–æ–≤–æ</Text>
                  </TouchableOpacity>
                </>
              )}
            </View>
          )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–µ–ª–∏ –≤–µ—Å–∞ */}
          {currentField === 'weightGoal' && (
            <View style={styles.selectorContent}>
              <Text style={[styles.selectorTitle, { color: colors.text }]}>
                –ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?
              </Text>
              <TouchableOpacity
                style={[
                  styles.goalOption,
                  {
                    backgroundColor: colors.background,
                    borderColor: colors.border
                  }
                ]}
                onPress={() => handleFieldSelect('lose')}
              >
                <Text style={styles.goalIcon}>üìâ</Text>
                <View style={styles.goalInfo}>
                  <Text style={[styles.goalName, { color: colors.text }]}>
                    –°–Ω–∏–∑–∏—Ç—å –≤–µ—Å
                  </Text>
                  <Text style={[styles.goalDescription, { color: colors.textSecondary }]}>
                    –î–æ—Å—Ç–∏—á—å –º–µ–Ω—å—à–µ–≥–æ –≤–µ—Å–∞
                  </Text>
                </View>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[
                  styles.goalOption,
                  {
                    backgroundColor: colors.background,
                    borderColor: colors.border
                  }
                ]}
                onPress={() => handleFieldSelect('gain')}
              >
                <Text style={styles.goalIcon}>üìà</Text>
                <View style={styles.goalInfo}>
                  <Text style={[styles.goalName, { color: colors.text }]}>
                    –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å
                  </Text>
                  <Text style={[styles.goalDescription, { color: colors.textSecondary }]}>
                    –î–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–µ–≥–æ –≤–µ—Å–∞
                  </Text>
                </View>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[
                  styles.goalOption,
                  {
                    backgroundColor: colors.background,
                    borderColor: colors.border
                  }
                ]}
                onPress={() => handleFieldSelect('maintain')}
              >
                <Text style={styles.goalIcon}>‚öñÔ∏è</Text>
                <View style={styles.goalInfo}>
                  <Text style={[styles.goalName, { color: colors.text }]}>
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å
                  </Text>
                  <Text style={[styles.goalDescription, { color: colors.textSecondary }]}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å
                  </Text>
                </View>
              </TouchableOpacity>
            </View>
          )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã */}
          {currentField === 'frequency' && (
            <View style={styles.selectorContent}>
              <Text style={[styles.selectorTitle, { color: colors.text }]}>
                –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é?
              </Text>
              <View style={styles.frequencyOptions}>
                {[1, 2, 3, 4, 5, 6, 7].map(days => (
                  <TouchableOpacity
                    key={days}
                    style={[
                      styles.frequencyOption,
                      {
                        backgroundColor: colors.primary + '15',
                        borderColor: colors.primary
                      }
                    ]}
                    onPress={() => handleFieldSelect(days.toString(), { targetDaysPerWeek: days.toString() })}
                  >
                    <Text style={[styles.frequencyNumber, { color: colors.primary }]}>
                      {days}
                    </Text>
                    <Text style={[styles.frequencyLabel, { color: colors.textSecondary }]}>
                      {days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          )}
          
    {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–≤–µ—Ç–∞ */}
    {currentField === 'color' && (
      <View style={styles.selectorContent}>
        <Text style={[styles.selectorTitle, { color: colors.text }]}>
          –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç
        </Text>
        <Text style={[styles.selectorSubtitle, { color: colors.textSecondary }]}>
          –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞–ª–∏—Ç—Ä
        </Text>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–≤–µ—Ç–æ–≤ */}
        <View style={[styles.colorSliderHeader, { backgroundColor: colors.primary + '15' }]}>
          <Text style={styles.colorCategoryIcon}>
            {Object.values(HABIT_COLOR_CATEGORIES)[currentColorCategory]?.icon}
          </Text>
          <Text style={[styles.colorSliderTitle, { color: colors.text }]}>
            {Object.values(HABIT_COLOR_CATEGORIES)[currentColorCategory]?.label}
          </Text>
        </View>

        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞ –°–û –°–í–ê–ô–ü–ê–ú–ò */}
        <View style={styles.colorSliderContainer}>
          <ScrollView
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            snapToInterval={SCREEN_WIDTH * 0.9 - 32}
            decelerationRate="fast"
            contentContainerStyle={styles.colorScrollContent}
            onMomentumScrollEnd={(event) => {
              const offsetX = event.nativeEvent.contentOffset.x;
              const pageWidth = SCREEN_WIDTH * 0.9 - 32;
              const newIndex = Math.round(offsetX / pageWidth);
              const maxIndex = Object.keys(HABIT_COLOR_CATEGORIES).length - 1;
              const clampedIndex = Math.max(0, Math.min(newIndex, maxIndex));

              if (clampedIndex !== currentColorCategory) {
                setCurrentColorCategory(clampedIndex);
              }
            }}
            ref={colorScrollRef}
          >
                {Object.values(HABIT_COLOR_CATEGORIES).map((colorGroup, groupIndex) => (
                  <View
                    key={groupIndex}
                    style={[
                      styles.colorSliderContent,
                      { width: SCREEN_WIDTH * 0.9 - 32 }
                    ]}
                  >
                    <View style={styles.rotatedGridContainer}>
                      <View style={styles.rotatedGrid}>
                        {colorGroup.colors.slice(0, 9).map((color, index) => {
                          // –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–∫–∏ 3x3
                    const positions = [
                      { top: 80, left: 80 },   // 0 - —Ü–µ–Ω—Ç—Ä
                      { top: 20, left: 80 },   // 1 - –≤–µ—Ä—Ö (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 60px)
                      { top: 50, left: 110 },  // 2 - –≤–µ—Ä—Ö-–ø—Ä–∞–≤–æ
                      { top: 80, left: 140 },  // 3 - –ø—Ä–∞–≤–æ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 60px)
                      { top: 110, left: 110 }, // 4 - –Ω–∏–∑-–ø—Ä–∞–≤–æ
                      { top: 140, left: 80 },  // 5 - –Ω–∏–∑ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 60px)
                      { top: 110, left: 50 },  // 6 - –Ω–∏–∑-–ª–µ–≤–æ
                      { top: 80, left: 20 },   // 7 - –ª–µ–≤–æ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 60px)
                      { top: 50, left: 50 },   // 8 - –≤–µ—Ä—Ö-–ª–µ–≤–æ
                    ];

                          return (
                            <TouchableOpacity
                              key={color}
                              style={[
                                styles.colorCircleRotated,
                                {
                                  backgroundColor: color,
                                  borderWidth: formData.color === color ? 3 : 0,
                                  borderColor: formData.color === color ? '#ffffff' : 'transparent',
                                  top: positions[index]?.top || 0,
                                  left: positions[index]?.left || 0,
                                }
                              ]}
                              onPress={() => handleFieldSelect(color)}
                            >
                              {formData.color === color && (
                                <Ionicons name="checkmark" size={18} color="#ffffff" />
                              )}
                            </TouchableOpacity>
                          );
                        })}
                      </View>
                    </View>
                  </View>
                ))}
          </ScrollView>
        </View>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ) */}
        <View style={styles.colorSliderIndicators}>
          {Object.keys(HABIT_COLOR_CATEGORIES).map((_, index) => (
            <TouchableOpacity
              key={index}
              style={[
                styles.colorSliderDot,
                {
                  backgroundColor: index === currentColorCategory
                    ? colors.primary
                    : colors.border
                }
              ]}
              onPress={() => {
                // –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                const pageWidth = SCREEN_WIDTH * 0.9 - 32;
                colorScrollRef.current?.scrollTo({
                  x: index * pageWidth,
                  animated: true
                });
                setCurrentColorCategory(index);
              }}
            />
          ))}
        </View>
      </View>
    )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–∫–æ–Ω–∫–∏ */}
          {currentField === 'icon' && (
            <View style={styles.selectorContent}>
              <Text style={[styles.selectorTitle, { color: colors.text }]}>
                –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É
              </Text>

              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              <View style={styles.iconSliderHeader}>
                <Text style={styles.iconCategoryIcon}>
                  {Object.values(HABIT_ICON_CATEGORIES)[currentIconCategory]?.icon}
                </Text>
                <Text style={[styles.iconSliderCategoryTitle, { color: colors.text }]}>
                  {Object.values(HABIT_ICON_CATEGORIES)[currentIconCategory]?.label}
                </Text>
              </View>

              {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞ */}
              <View style={styles.iconSliderContainer}>
                {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ */}
                <TouchableOpacity
                  style={[
                    styles.iconSliderArrow,
                    {
                      backgroundColor: colors.surface,
                      opacity: currentIconCategory === 0 ? 0.3 : 1
                    }
                  ]}
                  onPress={() => {
                    if (currentIconCategory > 0) {
                      setCurrentIconCategory(currentIconCategory - 1);
                    }
                  }}
                  disabled={currentIconCategory === 0}
                >
                  <Ionicons name="chevron-back" size={20} color={colors.text} />
                </TouchableOpacity>

                {/* –°–µ—Ç–∫–∞ –∏–∫–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                <View style={styles.iconSliderContent}>
                  <View style={styles.iconCategoryGrid}>
                    {Object.values(HABIT_ICON_CATEGORIES)[currentIconCategory]?.icons.map(icon => (
                      <TouchableOpacity
                        key={icon}
                        style={[
                          styles.iconOptionCompact,
                          {
                            backgroundColor: formData.icon === icon ? colors.primary + '20' : colors.background,
                            borderColor: formData.icon === icon ? colors.primary : colors.border,
                            borderWidth: formData.icon === icon ? 2 : 1
                          }
                        ]}
                        onPress={() => handleFieldSelect(icon)}
                      >
                        <Text style={styles.iconTextCompact}>{icon}</Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                {/* –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ */}
                <TouchableOpacity
                  style={[
                    styles.iconSliderArrow,
                    {
                      backgroundColor: colors.surface,
                      opacity: currentIconCategory === Object.keys(HABIT_ICON_CATEGORIES).length - 1 ? 0.3 : 1
                    }
                  ]}
                  onPress={() => {
                    if (currentIconCategory < Object.keys(HABIT_ICON_CATEGORIES).length - 1) {
                      setCurrentIconCategory(currentIconCategory + 1);
                    }
                  }}
                  disabled={currentIconCategory === Object.keys(HABIT_ICON_CATEGORIES).length - 1}
                >
                  <Ionicons name="chevron-forward" size={20} color={colors.text} />
                </TouchableOpacity>
              </View>

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü */}
              <View style={styles.iconSliderIndicators}>
                {Object.keys(HABIT_ICON_CATEGORIES).map((_, index) => (
                  <TouchableOpacity
                    key={index}
                    style={[
                      styles.iconSliderDot,
                      {
                        backgroundColor: index === currentIconCategory
                          ? colors.primary
                          : colors.border
                      }
                    ]}
                    onPress={() => setCurrentIconCategory(index)}
                  />
                ))}
              </View>
            </View>
          )}
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ */}
                    {currentField === 'reminder' && (
                      <View style={styles.selectorContent}>
                        <Text style={[styles.selectorTitle, { color: colors.text }]}>
                          –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        </Text>

                        <View style={styles.timePickerContainer}>
                          {/* –ß–∞—Å—ã */}
                          <View style={styles.timePickerColumn}>
                            <Text style={[styles.timePickerLabel, { color: colors.textSecondary }]}>–ß–∞—Å—ã</Text>
                            <View style={styles.timePickerWrapper}>
                              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Ñ–æ–∫—É—Å–∞ */}
                              <View style={[styles.timePickerFocusZone, { borderColor: colors.primary }]} />

                              <ScrollView
                                ref={ref => { hoursScrollRef.current = ref; }}
                                style={styles.timePickerScroll}
                                showsVerticalScrollIndicator={false}
                                snapToInterval={40}
                                decelerationRate="fast"
                                onMomentumScrollEnd={(event) => {
                                  const offsetY = event.nativeEvent.contentOffset.y;
                                  // –£—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –≤ 80px
                                  const index = Math.round(offsetY / 40);
                                  const clampedIndex = Math.max(0, Math.min(23, index));

                                  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                                  const minutes = formData.reminderTime.split(':')[1] || '00';
                                  setFormData({
                                    ...formData,
                                    reminderTime: `${clampedIndex.toString().padStart(2, '0')}:${minutes}`
                                  });

                                  // Haptic feedback
                                  if (Platform.OS === 'ios') {
                                    Vibration.vibrate(10);
                                  }
                                }}
                                onScrollEndDrag={(event) => {
                                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
                                  const offsetY = event.nativeEvent.contentOffset.y;
                                  const index = Math.round(offsetY / 40);
                                  const clampedIndex = Math.max(0, Math.min(23, index));

                                  hoursScrollRef.current?.scrollTo({
                                    y: clampedIndex * 40,
                                    animated: true
                                  });
                                }}
                              >
                                {/* –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                <View style={{ height: 80 }} />

                                {Array.from({ length: 24 }, (_, i) => {
                                  const isCenter = parseInt(formData.reminderTime.split(':')[0]) === i;

                                  return (
                                    <View
                                      key={i}
                                      style={[
                                        styles.timePickerItem,
                                        {
                                          backgroundColor: 'transparent',
                                          opacity: isCenter ? 1 : 0.4,
                                          transform: [
                                            { scale: isCenter ? 1.2 : 1 }
                                          ]
                                        }
                                      ]}
                                    >
                                      <Text style={[
                                        styles.timePickerItemText,
                                        {
                                          color: isCenter ? colors.primary : colors.text,
                                          fontWeight: isCenter ? 'bold' : 'normal',
                                          fontSize: isCenter ? 20 : 16
                                        }
                                      ]}>
                                        {i.toString().padStart(2, '0')}
                                      </Text>
                                    </View>
                                  );
                                })}

                                {/* –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                <View style={{ height: 80 }} />
                              </ScrollView>
                            </View>
                          </View>

                          <Text style={[styles.timePickerSeparator, { color: colors.text }]}>:</Text>

                          {/* –ú–∏–Ω—É—Ç—ã */}
                          <View style={styles.timePickerColumn}>
                            <Text style={[styles.timePickerLabel, { color: colors.textSecondary }]}>–ú–∏–Ω—É—Ç—ã</Text>
                            <View style={styles.timePickerWrapper}>
                              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Ñ–æ–∫—É—Å–∞ */}
                              <View style={[styles.timePickerFocusZone, { borderColor: colors.primary }]} />

                              <ScrollView
                                ref={ref => { minutesScrollRef.current = ref; }}
                                style={styles.timePickerScroll}
                                showsVerticalScrollIndicator={false}
                                snapToInterval={40}
                                decelerationRate="fast"
                                onMomentumScrollEnd={(event) => {
                                  const offsetY = event.nativeEvent.contentOffset.y;
                                  // –£—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –≤ 80px
                                  const index = Math.round(offsetY / 40);
                                  const minutesArray = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
                                  const clampedIndex = Math.max(0, Math.min(minutesArray.length - 1, index));
                                  const selectedMinute = minutesArray[clampedIndex];

                                  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                                  const hours = formData.reminderTime.split(':')[0] || '09';
                                  setFormData({
                                    ...formData,
                                    reminderTime: `${hours}:${selectedMinute.toString().padStart(2, '0')}`
                                  });

                                  // Haptic feedback
                                  if (Platform.OS === 'ios') {
                                    Vibration.vibrate(10);
                                  }
                                }}
                                onScrollEndDrag={(event) => {
                                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏
                                  const offsetY = event.nativeEvent.contentOffset.y;
                                  const index = Math.round(offsetY / 40);
                                  const minutesArray = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
                                  const clampedIndex = Math.max(0, Math.min(minutesArray.length - 1, index));

                                  minutesScrollRef.current?.scrollTo({
                                    y: clampedIndex * 40,
                                    animated: true
                                  });
                                }}
                              >
                                {/* –í–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                <View style={{ height: 80 }} />

                                {[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55].map(i => {
                                  const isCenter = parseInt(formData.reminderTime.split(':')[1]) === i;

                                  return (
                                    <View
                                      key={i}
                                      style={[
                                        styles.timePickerItem,
                                        {
                                          backgroundColor: 'transparent',
                                          opacity: isCenter ? 1 : 0.4,
                                          transform: [
                                            { scale: isCenter ? 1.2 : 1 }
                                          ]
                                        }
                                      ]}
                                    >
                                      <Text style={[
                                        styles.timePickerItemText,
                                        {
                                          color: isCenter ? colors.primary : colors.text,
                                          fontWeight: isCenter ? 'bold' : 'normal',
                                          fontSize: isCenter ? 20 : 16
                                        }
                                      ]}>
                                        {i.toString().padStart(2, '0')}
                                      </Text>
                                    </View>
                                  );
                                })}

                                {/* –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è */}
                                <View style={{ height: 80 }} />
                              </ScrollView>
                            </View>
                          </View>
                        </View>

                        <Text style={[styles.selectedTimePreview, { color: colors.text }]}>
                          –í—ã–±—Ä–∞–Ω–æ: {formData.reminderTime}
                        </Text>

                        <TouchableOpacity
                          style={[styles.selectorButton, { backgroundColor: colors.primary }]}
                          onPress={() => handleFieldSelect(formData.reminderTime)}
                        >
                          <Text style={styles.selectorButtonText}>–ì–æ—Ç–æ–≤–æ</Text>
                        </TouchableOpacity>
                      </View>
                    )}
        </Animated.View>
      </View>
    );
  };

const isFormComplete = () => {
    const requiredFields = ['name', 'description', 'category', 'type', 'icon', 'color', 'reminder'];
    
    if (formData.type === 'number') {
      requiredFields.push('details');
    } else if (formData.type === 'weight') {
      requiredFields.push('weightGoal');
      if (formData.weightGoal !== 'maintain') {
        requiredFields.push('details');
      }
    }
    
    // –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    requiredFields.push('frequency');
    
    return requiredFields.every(field => completedFields.has(field));
  };

  // === –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† ===
  return (
    <Modal
      visible={visible}
      animationType="none"
      transparent={true}
      onRequestClose={onCancel}
    >
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardView}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <View style={[styles.header, { borderBottomColor: colors.border }]}>
            <TouchableOpacity onPress={onCancel} style={styles.closeButton}>
              <Ionicons name="close" size={24} color={colors.text} />
            </TouchableOpacity>
            <Text style={[styles.headerTitle, { color: colors.text }]}>
              {habit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É' : '–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞'}
            </Text>
            <View style={styles.headerRight} />
          </View>
          
          {/* –ü—Ä–µ–≤—å—é –ø—Ä–∏–≤—ã—á–∫–∏ */}
          {renderHabitPreview()}
          
          {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {renderTextContent()}
          
          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <View style={[styles.actionButtons, { borderTopColor: colors.border }]}>
            <TouchableOpacity
              style={[styles.cancelButton, { backgroundColor: colors.surface }]}
              onPress={onCancel}
            >
              <Text style={[styles.cancelButtonText, { color: colors.text }]}>
                –û—Ç–º–µ–Ω–∞
              </Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[
                styles.saveButton,
                { 
                  backgroundColor: isFormComplete() ? colors.primary : colors.surface,
                  opacity: isFormComplete() ? 1 : 0.5
                }
              ]}
              onPress={handleSave}
              disabled={!isFormComplete()}
            >
              <Text style={[
                styles.saveButtonText,
                { color: isFormComplete() ? '#ffffff' : colors.textSecondary }
              ]}>
                {habit ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'}
              </Text>
            </TouchableOpacity>
          </View>
          
          {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª–µ–π */}
          {renderFieldSelector()}
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );
};

// === –°–¢–ò–õ–ò ===
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  keyboardView: {
    flex: 1,
  },
  
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderBottomWidth: 1,
  },
  
  closeButton: {
    padding: SPACING.xs,
  },
  
  headerTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: '600',
  },
  
  headerRight: {
    width: 32,
  },
  
  // === –ü–†–ï–í–¨–Æ –ü–†–ò–í–´–ß–ö–ò ===
  previewContainer: {
    margin: SPACING.md,
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  
  previewTitle: {
    ...TYPOGRAPHY.caption,
    fontWeight: '600',
    marginBottom: SPACING.sm,
    textAlign: 'center',
  },
  
  previewCard: {
    borderRadius: BORDER_RADIUS.md,
    padding: SPACING.md,
    borderWidth: 2,
  },
  
  previewHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  
  previewIcon: {
    fontSize: 32,
    marginRight: SPACING.sm,
  },
  
  previewInfo: {
    flex: 1,
  },
  
  previewName: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
    marginBottom: 2,
  },

  previewDescription: {
  ...TYPOGRAPHY.caption,
  marginTop: 2,
  marginBottom: 4,
},
  
  previewMeta: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  previewType: {
    ...TYPOGRAPHY.caption,
  },
  
  previewTarget: {
    ...TYPOGRAPHY.caption,
    marginLeft: SPACING.xs,
  },
  
  previewFooter: {
    flexDirection: 'row',
    gap: SPACING.sm,
  },
  
  previewBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    borderRadius: BORDER_RADIUS.sm,
    gap: SPACING.xs,
  },
  
  previewBadgeText: {
    ...TYPOGRAPHY.caption,
    fontWeight: '500',
  },
  
  // === –¢–ï–ö–°–¢–û–í–´–ô –ö–û–ù–¢–ï–ù–¢ ===
  textContainer: {
    flex: 1,
    paddingHorizontal: SPACING.lg,
  },
  
  textWrapper: {
    paddingVertical: SPACING.md,
  },
  
  textLineWrapper: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 2, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
  },
  
  textLine: {
    ...TYPOGRAPHY.body,
    lineHeight: 22, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  },
  
  fieldWrapper: {
    alignSelf: 'flex-start',
  },
  
  textField: {
    ...TYPOGRAPHY.body,
    lineHeight: 22, // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    paddingHorizontal: SPACING.xs,
    paddingVertical: 2,
    borderRadius: BORDER_RADIUS.xs,
  },
  
  textFieldEmpty: {
    backgroundColor: 'rgba(0, 122, 255, 0.1)',
    borderWidth: 1,
    borderColor: 'rgba(0, 122, 255, 0.3)',
    borderStyle: 'dashed',
    minHeight: 24, // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    minWidth: 100,
  },
  
  textFieldCompleted: {
    fontWeight: '600',
    borderBottomWidth: 2,
  },
  
  // === –°–ï–õ–ï–ö–¢–û–† –ü–û–õ–ï–ô ===
  selectorOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  selectorBackdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  
  selectorContainer: {
    width: SCREEN_WIDTH * 0.9,
    maxHeight: '70%',
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 10,
  },
  
  selectorContent: {
    padding: SPACING.lg,
  },
  
  selectorTitle: {
    ...TYPOGRAPHY.h3,
    fontWeight: '600',
    marginBottom: SPACING.md,
    textAlign: 'center',
  },
  
  selectorButton: {
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    alignItems: 'center',
    marginTop: SPACING.md,
  },
  
  selectorButtonText: {
    ...TYPOGRAPHY.button,
    color: '#ffffff',
    fontWeight: '600',
  },
  
  // –ü–æ–ª—è –≤–≤–æ–¥–∞
  nameInput: {
    borderWidth: 1,
    borderRadius: BORDER_RADIUS.md,
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    ...TYPOGRAPHY.body,
    marginBottom: SPACING.sm,
  },

 // –û–ø–∏—Å–∞–Ω–∏–µ
  descriptionInput: {
  borderWidth: 1,
  borderRadius: BORDER_RADIUS.md,
  paddingHorizontal: SPACING.md,
  paddingVertical: SPACING.md,
  ...TYPOGRAPHY.body,
  marginBottom: SPACING.sm,
  minHeight: 80,
  textAlignVertical: 'top',
},

selectorSubtitle: {
  ...TYPOGRAPHY.caption,
  marginBottom: SPACING.md,
  textAlign: 'center',
},
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  categoryOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 1,
    marginBottom: SPACING.sm,
  },
  
  categoryIcon: {
    fontSize: 24,
    marginRight: SPACING.md,
  },
  
  categoryInfo: {
    flex: 1,
  },
  
  categoryName: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
  },
  
  // –¢–∏–ø—ã –ø—Ä–∏–≤—ã—á–µ–∫
  typeOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 1,
    marginBottom: SPACING.sm,
  },
  
  typeIcon: {
    fontSize: 24,
    marginRight: SPACING.md,
  },
  
  typeInfo: {
    flex: 1,
  },
  
  typeName: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
    marginBottom: 2,
  },
  
  typeDescription: {
    ...TYPOGRAPHY.caption,
  },
  
  // –î–µ—Ç–∞–ª–∏
  detailsInputs: {
    gap: SPACING.sm,
  },
  
  valueInput: {
    borderWidth: 1,
    borderRadius: BORDER_RADIUS.md,
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    ...TYPOGRAPHY.body,
    textAlign: 'center',
    fontSize: 18,
  },
  
  unitSelector: {
    maxHeight: 100,
    marginVertical: SPACING.sm,
  },
  
  unitOption: {
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 1,
    marginRight: SPACING.sm,
  },
  
  unitText: {
    ...TYPOGRAPHY.bodyMedium,
    fontWeight: '500',
  },
  
  weightInput: {
    borderWidth: 1,
    borderRadius: BORDER_RADIUS.md,
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    ...TYPOGRAPHY.body,
    fontSize: 24,
    textAlign: 'center',
    fontWeight: '600',
  },
  
  // –ß–∞—Å—Ç–æ—Ç–∞
  frequencyOptions: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: SPACING.sm,
    justifyContent: 'center',
  },
  
  frequencyOption: {
    width: 70,
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 2,
    alignItems: 'center',
  },
  
  frequencyNumber: {
    ...TYPOGRAPHY.h2,
    fontWeight: 'bold',
  },
  
  frequencyLabel: {
    ...TYPOGRAPHY.caption,
  },
  
  // –¶–≤–µ—Ç–∞
  colorGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: SPACING.sm,
    justifyContent: 'center',
  },
  
  colorOption: {
    width: 50,
    height: 50,
    borderRadius: BORDER_RADIUS.full,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
  },

  // –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ü–≤–µ—Ç–æ–≤
  colorCategoriesScroll: {
    maxHeight: 400,
  },

  colorCategory: {
    marginBottom: SPACING.xl,
  },

  colorCategoryHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },

  colorCategoryIcon: {
    fontSize: 16,
    marginRight: SPACING.sm,
  },

  colorCategoryTitle: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
  },



  colorCategoryGrid: {
      width: 220,
      alignSelf: 'center',
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
      gap: SPACING.md,
      paddingHorizontal: SPACING.sm,
    },

    colorOptionCompact: {
      width: 60,
      height: 60,
      borderRadius: BORDER_RADIUS.full,
      justifyContent: 'center',
      alignItems: 'center',
      elevation: 4,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 3 },
      shadowOpacity: 0.3,
      shadowRadius: 6,
      marginBottom: SPACING.sm,
    },

// –°—Ç–∏–ª–∏ —Å–ª–∞–π–¥–µ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
colorSliderHeader: {
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'center',
  marginBottom: SPACING.lg,
  padding: SPACING.md,
  borderRadius: BORDER_RADIUS.md,
},

colorCategoryIcon: {
  fontSize: 24,
  marginRight: SPACING.sm,
},

colorSliderTitle: {
  ...TYPOGRAPHY.h4,
  fontWeight: '600',
},

colorSliderContainer: {
  marginBottom: SPACING.lg,
  minHeight: 300,
},

colorScrollContent: {
  flexDirection: 'row',
  alignItems: 'center',
},

colorSliderContent: {
  flex: 1,
  paddingHorizontal: SPACING.sm,
  paddingVertical: 40, // ‚Üê –î–û–ë–ê–í–ò–¢–¨! –û—Ç—Å—Ç—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
  justifyContent: 'center',
  alignItems: 'center',
  minHeight: 260,
},

colorCategoryGrid: {
  flexDirection: 'row',
  flexWrap: 'wrap',
  justifyContent: 'space-between',
  gap: SPACING.md,
  paddingHorizontal: SPACING.sm,
},

colorOptionCompact: {
  width: 50,
  height: 50,
  borderRadius: BORDER_RADIUS.full,
  justifyContent: 'center',
  alignItems: 'center',
  elevation: 4,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 3 },
  shadowOpacity: 0.3,
  shadowRadius: 6,
  marginBottom: SPACING.sm,
},

colorSliderIndicators: {
  flexDirection: 'row',
  justifyContent: 'center',
  alignItems: 'center',
  gap: SPACING.sm,
},

colorSliderDot: {
  width: 8,
  height: 8,
  borderRadius: 4,
},
  
  // –ò–∫–æ–Ω–∫–∏
  iconGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: SPACING.sm,
    justifyContent: 'center',
  },
  
  iconOption: {
    width: 60,
    height: 60,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  iconText: {
    fontSize: 24,
  },
  
// === –ù–û–í–´–ï –°–¢–ò–õ–ò –î–õ–Ø –í–´–ë–û–†–ê –í–†–ï–ú–ï–ù–ò ===
  timePickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    height: 200,
    marginVertical: SPACING.md,
  },
  
  timePickerColumn: {
    flex: 1,
    alignItems: 'center',
  },
  
  timePickerLabel: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: SPACING.sm,
    textTransform: 'uppercase',
  },
  
  timePickerScroll: {
    height: 160,
    width: 80,
  },
  
  timePickerItem: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginVertical: 2,
    borderRadius: BORDER_RADIUS.md,
  },
  
  timePickerItemText: {
    fontSize: 18,
  },
  
  timePickerSeparator: {
    fontSize: 24,
    fontWeight: 'bold',
    marginHorizontal: SPACING.md,
  },
  
  selectedTimePreview: {
    textAlign: 'center',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: SPACING.md,
  },
  
  // –¶–µ–ª–∏ –≤–µ—Å–∞
  goalOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    borderWidth: 1,
    marginBottom: SPACING.sm,
  },
  
  goalIcon: {
    fontSize: 24,
    marginRight: SPACING.md,
  },
  
  goalInfo: {
    flex: 1,
  },
  
  goalName: {
    ...TYPOGRAPHY.body,
    fontWeight: '600',
    marginBottom: 2,
  },
  
  goalDescription: {
    ...TYPOGRAPHY.caption,
  },
  
  // === –ö–ù–û–ü–ö–ò –î–ï–ô–°–¢–í–ò–ô ===
  actionButtons: {
    flexDirection: 'row',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.md,
    borderTopWidth: 1,
    gap: SPACING.sm,
  },
  
  cancelButton: {
    flex: 1,
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  
  cancelButtonText: {
    ...TYPOGRAPHY.button,
    fontWeight: '600',
  },
  
  saveButton: {
    flex: 1,
    paddingVertical: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  
  saveButtonText: {
    ...TYPOGRAPHY.button,
    fontWeight: 'bold',
  },

   // –°—Ç–∏–ª–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –∏–∫–æ–Ω–æ–∫
    iconSliderHeader: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginBottom: SPACING.lg,
    },

    iconCategoryIcon: {
      fontSize: 16,
      marginRight: SPACING.sm,
    },

    iconSliderCategoryTitle: {
      ...TYPOGRAPHY.h4,
      fontWeight: '600',
    },

    iconSliderContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      marginBottom: SPACING.lg,
      minHeight: 200,
    },

    iconSliderArrow: {
      width: 44,
      height: 44,
      borderRadius: BORDER_RADIUS.full,
      justifyContent: 'center',
      alignItems: 'center',
      elevation: 2,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.2,
      shadowRadius: 2,
    },

    iconSliderContent: {
      flex: 1,
      marginHorizontal: SPACING.md,
    },

    iconCategoryGrid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
      gap: SPACING.sm,
    },

    iconOptionCompact: {
      width: '22%', // 4 –≤ —Ä—è–¥—É
      aspectRatio: 1,
      borderRadius: BORDER_RADIUS.md,
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: SPACING.sm,
    },

    iconTextCompact: {
      fontSize: 24,
    },

    iconSliderIndicators: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      gap: SPACING.sm,
    },

    iconSliderDot: {
      width: 8,
      height: 8,
      borderRadius: 4,
    },

// === –°–¢–ò–õ–ò –î–õ–Ø PICKER'–ê –í–†–ï–ú–ï–ù–ò ===
timePickerContainer: {
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'center',
  height: 240, // –£–≤–µ–ª–∏—á–∏–ª —Å 200 –¥–æ 240
  marginVertical: SPACING.md,
},

timePickerColumn: {
  flex: 1,
  alignItems: 'center',
},

timePickerLabel: {
  fontSize: 12,
  fontWeight: '600',
  marginBottom: SPACING.sm,
  textTransform: 'uppercase',
},

timePickerWrapper: {
  position: 'relative',
  height: 200, // –£–≤–µ–ª–∏—á–∏–ª —Å 160 –¥–æ 200 (5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ * 40px)
  width: 80,
},

timePickerFocusZone: {
  position: 'absolute',
  top: 80, // –û—Å—Ç–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É (200/2 - 40/2 = 80)
  left: 0,
  right: 0,
  height: 40,
  borderWidth: 2,
  borderRadius: BORDER_RADIUS.md,
  backgroundColor: 'transparent',
  zIndex: 1,
  pointerEvents: 'none',
},

timePickerScroll: {
  height: 200, // –£–≤–µ–ª–∏—á–∏–ª —Å 160 –¥–æ 200
  width: 80,
},

timePickerItem: {
  height: 40,
  justifyContent: 'center',
  alignItems: 'center',
  marginVertical: 0,
  borderRadius: BORDER_RADIUS.md,
},

timePickerItemText: {
  fontSize: 18,
},

timePickerSeparator: {
  fontSize: 24,
  fontWeight: 'bold',
  marginHorizontal: SPACING.md,
},

selectedTimePreview: {
  textAlign: 'center',
  fontSize: 16,
  fontWeight: '600',
  marginBottom: SPACING.md,
},

// === –°–¢–ò–õ–ò –°–õ–ê–ô–î–ï–†–ê –ö–ê–¢–ï–ì–û–†–ò–ô ===
categorySliderHeader: {
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'center',
  marginBottom: SPACING.lg,
  padding: SPACING.md,
  borderRadius: BORDER_RADIUS.md,
},

categoryTypeIcon: {
  fontSize: 24,
  marginRight: SPACING.sm,
},

categorySliderTitle: {
  ...TYPOGRAPHY.h4,
  fontWeight: '600',
},

// –ò–∑–º–µ–Ω–∏—Ç—å categorySliderContainer
categorySliderContainer: {

  marginBottom: SPACING.lg,
  minHeight: 280,
},

categorySliderArrow: {
  width: 44,
  height: 44,
  borderRadius: BORDER_RADIUS.full,
  justifyContent: 'center',
  alignItems: 'center',
  elevation: 2,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 1 },
  shadowOpacity: 0.2,
  shadowRadius: 2,
},

categorySliderContent: {
  flex: 1,
  paddingHorizontal: SPACING.md,
},

categoriesGrid: {
  gap: SPACING.sm,
},

categoryOptionCompact: {
  flexDirection: 'row',
  alignItems: 'center',
  padding: SPACING.md,
  borderRadius: BORDER_RADIUS.md,
  borderWidth: 1,
  marginBottom: SPACING.sm,
},

categoryDescription: {
  ...TYPOGRAPHY.caption,
  marginTop: 2,
},

categorySliderIndicators: {
  flexDirection: 'row',
  justifyContent: 'center',
  alignItems: 'center',
  gap: SPACING.sm,
},

categorySliderDot: {
  width: 8,
  height: 8,
  borderRadius: 4,
},

categoryScrollContent: {
  flexDirection: 'row',
  alignItems: 'center',
},
rotatedGridContainer: {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  width: '100%',
  height: 360,  // –ï—â–µ –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  paddingVertical: SPACING.lg,
  marginVertical: SPACING.md,
  overflow: 'visible',
},

rotatedGrid: {
  width: 220,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
  height: 220,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  position: 'relative',
  justifyContent: 'center',
  alignItems: 'center',
},

colorCircleRotated: {
  position: 'absolute',
  width: 48,    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% (40 * 1.2 = 48)
  height: 48,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20%
  borderRadius: BORDER_RADIUS.full,
  justifyContent: 'center',
  alignItems: 'center',
  elevation: 4,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 3 },
  shadowOpacity: 0.3,
  shadowRadius: 6,
},

});

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
export const getAnimationConfig = () => ANIMATION_CONFIG;
export const updateAnimationConfig = (newConfig) => {
  Object.assign(ANIMATION_CONFIG, newConfig);
};

export default HabitFormModal;