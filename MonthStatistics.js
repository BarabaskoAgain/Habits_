// ====================================
// –ö–û–ú–ü–û–ù–ï–ù–¢ –ú–ï–°–Ø–ß–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò
// MonthStatistics.js - –ú–ï–°–Ø–¶ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–õ–ê–ù–û–í)
// ====================================

import React, { useState, useMemo, useCallback } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Dimensions,
  Modal,
  Alert
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

import { THEMES, SPACING, BORDER_RADIUS, TYPOGRAPHY, MEASUREMENT_UNITS } from './constants';

import { 
  dateUtils, 
  statsUtils
} from './utils';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const MonthStatistics = ({
  habitsData = { activeHabits: [], archivedHabits: [] },
  selectedMonth,
  selectedYear,
  onHabitToggle = () => {},
  onHabitUpdateValue = () => {},
  theme = 'blue',
  isDarkMode = false,
  monthNames = [],
  // –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
  calculateAverageWeight,
  calculatePlanFromCreation,
  calculateDayStats,
  getDayStatsColor,
  getDayCellColor,
  getDayCellTextColor,
  getFactValueColor,
  formatCompactValue,
  formatStatValue
}) => {
  const colors = THEMES[theme][isDarkMode ? 'dark' : 'light'];
  
  // === –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–• –ò –ê–†–•–ò–í–ò–†–û–í–ê–ù–ù–´–• –ü–†–ò–í–´–ß–ï–ö ===
  const { activeHabits, archivedHabits } = habitsData;
  const allHabits = [...activeHabits, ...archivedHabits];
  
  // === –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –î–ù–Ø ===
  const [selectedDayData, setSelectedDayData] = useState(null);
  const [showDayModal, setShowDayModal] = useState(false);
  
  // === –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê –ü–†–ò–í–´–ß–ö–ò ===
  const [selectedHabitData, setSelectedHabitData] = useState(null);
  const [showHabitModal, setShowHabitModal] = useState(false);
  
  // === –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –†–ê–°–ö–†–´–í–ê–Æ–©–ò–•–°–Ø –ë–õ–û–ö–û–í ===
  const [expandedSections, setExpandedSections] = useState({
    stats: true,      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    info: false,      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–≤–µ—Ä–Ω—É—Ç–∞
    insights: false,  // –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—Ä–Ω—É—Ç
    daily: false,     // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ —Å–≤–µ—Ä–Ω—É—Ç—ã
    monthSummary: true // –ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞ –û–¢–ö–†–´–¢–´ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });

  // === –î–ù–ò –ù–ï–î–ï–õ–ò ===
  const weekDayNames = useMemo(() => ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'], []);

  // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –î–ù–Ø –° –£–ß–ï–¢–û–ú –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø ===
  const calculateDayStatsWithArchive = useCallback((date, allHabits) => {
    if (!allHabits || allHabits.length === 0) {
      return { completed: 0, total: 0, percentage: 0 };
    }

    let completed = 0;
    let total = 0;

    allHabits.forEach(habit => {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      const habitCreated = new Date(habit.createdAt);
      const currentDate = new Date(date);
      const habitCreatedDate = new Date(habitCreated.getFullYear(), habitCreated.getMonth(), habitCreated.getDate());
      const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (habitCreatedDate > currentDateOnly) {
        return;
      }
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –î–û —ç—Ç–æ–π –¥–∞—Ç—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (habit.archivedAt) {
        const archivedDate = new Date(habit.archivedAt);
        const archivedDateOnly = new Date(archivedDate.getFullYear(), archivedDate.getMonth(), archivedDate.getDate());
        if (archivedDateOnly < currentDateOnly) {
          return;
        }
      }
      
      // –ü—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É - —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –ø–ª–∞–Ω–µ
      total++;
      
      const completion = habit.completions?.[date];
      
      if (habit.type === 'boolean') {
        if (completion) completed++;
      } else if (habit.type === 'weight') {
        if (completion && typeof completion === 'object' && completion.weight > 0) completed++;
      } else if (habit.type === 'number') {
        if (completion && completion.completed) completed++;
      }
    });

    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
    return { completed, total, percentage };
  }, []);

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ—Å—è—Ü–∞
  const getCalendarDayCellColor = useCallback((percentage, colors) => {
    if (percentage === 100) {
      return colors.success + '30'; // 30% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å - –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π –∑–µ–ª–µ–Ω—ã–π
    } else if (percentage >= 50) {
      return colors.warning + '25'; // 25% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å - –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    } else if (percentage > 0) {
      return colors.error + '20'; // 20% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å - –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π –∫—Ä–∞—Å–Ω—ã–π
    } else {
      return colors.surface; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
    }
  }, []);

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø –ù–ê –î–ï–ù–¨ –í –ö–ê–õ–ï–ù–î–ê–†–ï ===
  const handleDayPress = useCallback((day) => {
    if (!day.isCurrentMonth) return;
    
    console.log('üîç Day pressed:', day.date, 'Today:', dateUtils.today());
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    const dayStats = calculateDayStatsWithArchive(day.date, allHabits);
    console.log('üîç Day stats:', dayStats);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    const dayHabitsData = allHabits.map(habit => {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
      const habitCreated = new Date(habit.createdAt);
      const currentDate = new Date(day.date);
      const habitCreatedDate = new Date(habitCreated.getFullYear(), habitCreated.getMonth(), habitCreated.getDate());
      const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
      if (habitCreatedDate > currentDateOnly) {
        return null;
      }
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
      if (habit.archivedAt) {
        const archivedDate = new Date(habit.archivedAt);
        const archivedDateOnly = new Date(archivedDate.getFullYear(), archivedDate.getMonth(), archivedDate.getDate());
        if (archivedDateOnly < currentDateOnly) {
          return null;
        }
      }
      
      const completion = habit.completions?.[day.date];
      console.log(`üîç Habit "${habit.name}" completion for ${day.date}:`, completion);
      
      let status = 'not_completed';
      let displayValue = '';
      let factValue = 0;
      let planValue = 1;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏ —Ñ–∞–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–≤—ã—á–∫–∏
      if (habit.type === 'boolean') {
        planValue = 1;
        factValue = completion ? 1 : 0;
        status = completion === true ? 'completed' : 'not_completed';
        displayValue = completion ? '‚úì' : null;
        status = completion === true ? 'completed' : 'empty';
      } else if (habit.type === 'weight') {
        planValue = 1;
        if (typeof completion === 'object' && completion.weight && completion.weight > 0) {
          factValue = 1;
          displayValue = completion.weight.toFixed(1);
          status = 'completed';
        } else {
          factValue = 0;
          status = 'not_completed';
          displayValue = '-';
        }
      } else if (habit.type === 'number') {
        planValue = habit.targetValue || 1;
        if (completion && completion.value && completion.value > 0) {
          factValue = completion.value;
          status = completion.completed ? 'completed' : 'partial';
const unitLabel = habit.unit && MEASUREMENT_UNITS[habit.unit] 
  ? MEASUREMENT_UNITS[habit.unit].shortLabel 
  : '';
displayValue = `${completion.value}${unitLabel ? ' ' + unitLabel : ''}`;
        } else {
          factValue = 0;
          status = 'not_completed';
          displayValue = '-';
        }
      }
      
      return {
        id: habit.id,
        name: habit.name,
        icon: habit.icon,
        color: habit.color,
        type: habit.type,
        unit: habit.unit,
        status,
        displayValue,
        planValue,
        factValue,
        isArchived: habit.archivedAt ? true : false
      };
    }).filter(habit => habit !== null); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
    
    setSelectedDayData({
      day: day.day,
      date: day.date,
      isToday: day.date === dateUtils.today(),
      stats: dayStats,
      habits: dayHabitsData
    });
    setShowDayModal(true);
  }, [allHabits, calculateDayStatsWithArchive]);

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø –ù–ê –ü–†–ò–í–´–ß–ö–£ ===
  const handleHabitPress = useCallback((habit) => {
    // –î–æ–±–∞–≤–ª—è–µ–º completions –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const habitWithCompletions = {
      ...habit,
      completions: allHabits.find(h => h.id === habit.id)?.completions || {}
    };
    setSelectedHabitData(habitWithCompletions);
    setShowHabitModal(true);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö —Å–µ–∫—Ü–∏–π
    setExpandedSections({
      stats: true,
      info: false,
      insights: false,
      daily: false,
      monthSummary: true // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã–º
    });
  }, [allHabits]);

  // === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ê–°–ö–†–´–¢–´–• –°–ï–ö–¶–ò–ô ===
  const toggleSection = useCallback((section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  }, []);

  // === –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø ===
  const translateUnit = useCallback((unit, value = 1) => {
    if (!unit) return '';
    
    const unitTranslations = {
      'times': value === 1 ? '—Ä–∞–∑' : '—Ä–∞–∑',
      'pieces': value === 1 ? '—à—Ç—É–∫–∞' : value < 5 ? '—à—Ç—É–∫–∏' : '—à—Ç—É–∫',
      'glasses': value === 1 ? '—Å—Ç–∞–∫–∞–Ω' : value < 5 ? '—Å—Ç–∞–∫–∞–Ω–∞' : '—Å—Ç–∞–∫–∞–Ω–æ–≤',
      'minutes': value === 1 ? '–º–∏–Ω—É—Ç–∞' : value < 5 ? '–º–∏–Ω—É—Ç—ã' : '–º–∏–Ω—É—Ç',
      'hours': value === 1 ? '—á–∞—Å' : value < 5 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤',
      'pages': value === 1 ? '—Å—Ç—Ä–∞–Ω–∏—Ü–∞' : value < 5 ? '—Å—Ç—Ä–∞–Ω–∏—Ü—ã' : '—Å—Ç—Ä–∞–Ω–∏—Ü',
      'exercises': value === 1 ? '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ' : value < 5 ? '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è' : '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
      'steps': value === 1 ? '—à–∞–≥' : value < 5 ? '—à–∞–≥–∞' : '—à–∞–≥–æ–≤',
      'km': '–∫–º',
      'kg': '–∫–≥',
      'ml': '–º–ª',
      'l': '–ª',
      '—Ä–∞–∑': '—Ä–∞–∑',
      '–º–∏–Ω': '–º–∏–Ω',
      '—á': '—á'
    };
    
    return unitTranslations[unit.toLowerCase()] || unit;
  }, []);

  // === –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ù–ê–ß–ï–ù–ò–ô –° –ü–ï–†–ï–í–û–î–û–ú ===
  const formatLocalizedValue = useCallback((value, type, unit) => {
    if (type === 'boolean') {
      return value ? '–î–∞' : '–ù–µ—Ç';
    }
    
    if (type === 'weight') {
      return typeof value === 'object' && value.weight ? 
        `${value.weight.toFixed(1)} –∫–≥` : 
        typeof value === 'number' ? `${value.toFixed(1)} –∫–≥` : '0 –∫–≥';
    }
    
    if (type === 'number') {
      const translatedUnit = translateUnit(unit, value);
      return `${value}${translatedUnit ? ' ' + translatedUnit : ''}`;
    }
    
    return value.toString();
  }, [translateUnit]);

  // === –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –õ–£–ß–®–ï–ô –°–ï–†–ò–ò –ó–ê –ú–ï–°–Ø–¶ ===
  const calculateBestStreakForMonth = useCallback((habit, dates) => {
    if (!habit.completions || !dates || dates.length === 0) return 0;
    
    let maxStreak = 0;
    let currentStreak = 0;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    const sortedDates = [...dates].sort((a, b) => new Date(a.date) - new Date(b.date));
    
    sortedDates.forEach(({ date }) => {
      const completion = habit.completions[date];
      let isCompleted = false;
      
      if (habit.type === 'boolean') {
        isCompleted = completion === true;
      } else if (habit.type === 'weight') {
        isCompleted = completion && typeof completion === 'object' && completion.weight > 0;
      } else if (habit.type === 'number') {
        isCompleted = completion && completion.completed;
      }
      
      if (isCompleted) {
        currentStreak++;
        maxStreak = Math.max(maxStreak, currentStreak);
      } else {
        currentStreak = 0;
      }
    });
    
    return maxStreak;
  }, []);

  // === –í–´–ß–ò–°–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –ú–ï–°–Ø–¶–ê ===
  const statisticsData = useMemo(() => {
    if (!allHabits || allHabits.length === 0) return { 
      dates: [], 
      activeHabitsStats: [], 
      archivedHabitsStats: [], 
      weeks: [] 
    };

    try {
      const startDate = new Date(selectedYear, selectedMonth, 1);
      const endDate = new Date(selectedYear, selectedMonth + 1, 0);
      
      const dates = [];
      const weeks = [];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –º–µ—Å—è—Ü–∞ –∏ –Ω–µ–¥–µ–ª–∏
      const currentWeekStart = new Date(startDate);
      currentWeekStart.setDate(startDate.getDate() - (startDate.getDay() === 0 ? 6 : startDate.getDay() - 1));
      
      const todayStr = dateUtils.today();
      
      while (currentWeekStart <= endDate) {
        const weekDays = [];
        for (let i = 0; i < 7; i++) {
          const date = new Date(currentWeekStart);
          date.setDate(currentWeekStart.getDate() + i);
          const dateStr = dateUtils.formatDateLocal(date);
          
          // –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º isToday —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
          const now = new Date();
          const isViewingCurrentMonthYear = (selectedMonth === now.getMonth() && selectedYear === now.getFullYear());
          const isToday = isViewingCurrentMonthYear && (dateStr === todayStr);
          
          weekDays.push({
            date: dateStr,
            day: date.getDate(),
            weekday: weekDayNames[i],
            isCurrentMonth: date.getMonth() === selectedMonth,
            isToday: isToday
          });
          
          // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
          if (date.getMonth() === selectedMonth && date.getDate() >= 25 && date.getDate() <= 28) {
            console.log(`üìä GENERATE Day ${date.getDate()}:`);
            console.log(`    dateStr: ${dateStr}`);
            console.log(`    todayStr: ${todayStr}`);
            console.log(`    isViewingCurrentMonthYear: ${isViewingCurrentMonthYear}`);
            console.log(`    isToday: ${isToday}`);
            console.log(`    selectedMonth: ${selectedMonth}, currentMonth: ${now.getMonth()}`);
            console.log(`    selectedYear: ${selectedYear}, currentYear: ${now.getFullYear()}`);
          }
          
          if (date.getMonth() === selectedMonth) {
            dates.push({
              date: dateStr,
              day: date.getDate(),
              weekday: weekDayNames[i],
              isToday: dateStr === todayStr
            });
          }
        }
        
        weeks.push(weekDays);
        currentWeekStart.setDate(currentWeekStart.getDate() + 7);
      }

      // –§–£–ù–ö–¶–ò–Ø –í–´–ß–ò–°–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –î–õ–Ø –ì–†–£–ü–ü–´ –ü–†–ò–í–´–ß–ï–ö
      const calculateHabitsStats = (habits) => {
        return habits.map(habit => {
          const completions = habit.completions || {};
          let weightEntries = [];
          
          const planValue = calculatePlanFromCreation(habit, startDate, endDate);
          
          let factValue = 0;
          let completedDays = 0;
          
          dates.forEach(({ date }) => {
            const completion = completions[date];
            
            if (habit.type === 'boolean') {
              if (completion === true) {
                factValue++;
                completedDays++;
              }
            } else if (habit.type === 'weight') {
              if (typeof completion === 'object' && completion.weight && completion.weight > 0) {
                weightEntries.push(completion.weight);
                factValue++;
                completedDays++;
              }
            } else if (habit.type === 'number') {
              if (completion && completion.value && completion.value > 0) {
                factValue += completion.value;
                if (completion.completed) completedDays++;
              }
            }
          });
          
          // –î–ª—è –≤–µ—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–∫—Ç
          if (habit.type === 'weight' && weightEntries.length > 0) {
            factValue = parseFloat(calculateAverageWeight(weightEntries).toFixed(1));
          }
          
          const percentage = planValue > 0 ? Math.round((factValue / planValue) * 100) : 0;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
          const dailyData = dates.map(({ date }) => {
            const completion = completions[date];
            let value = null;
            let status = 'empty';
            
            if (completion) {
              if (habit.type === 'boolean') {
                value = completion === true ? '‚úì' : null;
                status = completion === true ? 'completed' : 'empty';
              } else if (habit.type === 'weight') {
                if (typeof completion === 'object' && completion.weight && completion.weight > 0) {
                  value = completion.weight.toFixed(1);
                  status = 'completed';
                }
              } else if (habit.type === 'number') {
                if (completion.value && completion.value > 0) {
                  value = completion.value;
                  status = completion.completed ? 'completed' : 'partial';
                }
              }
            }
            
            return { date, value, status };
          });

          return {
            id: habit.id,
            name: habit.name,
            icon: habit.icon,
            color: habit.color,
            type: habit.type,
            unit: habit.unit,
            targetValue: habit.targetValue,
            targetWeight: habit.targetWeight,
            planValue,
            factValue,
            percentage,
            completedDays,
            dailyData,
            streak: statsUtils.getStreak(habit),
            createdAt: habit.createdAt,
            isArchived: habit.isArchived || false
          };
        });
      };

      // –í–´–ß–ò–°–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ò –ê–†–•–ò–í–ò–†–û–í–ê–ù–ù–´–• –ü–†–ò–í–´–ß–ï–ö
      const activeHabitsStats = calculateHabitsStats(activeHabits);
      const archivedHabitsStats = calculateHabitsStats(archivedHabits);

      return { dates, activeHabitsStats, archivedHabitsStats, weeks };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Å—è—Ü–∞:', error);
      return { dates: [], activeHabitsStats: [], archivedHabitsStats: [], weeks: [] };
    }
  }, [allHabits, activeHabits, archivedHabits, selectedMonth, selectedYear, calculateAverageWeight, calculatePlanFromCreation, weekDayNames]);

  // === –†–ï–ù–î–ï–† –û–ë–©–ï–ì–û –ö–ê–õ–ï–ù–î–ê–†–Ø –ú–ï–°–Ø–¶–ê –° –ò–¢–û–ì–ê–ú–ò ===
  const renderMonthSummaryCalendar = () => {
    const { weeks } = statisticsData;
    const availableWidth = SCREEN_WIDTH - (SPACING.md * 4) - (1 * 14);
    const dayWidth = Math.floor(availableWidth / 7);
    
    console.log('üîç RENDER CALENDAR START');
    console.log('üîç Selected month/year:', selectedMonth, selectedYear);
    
    return (
      <View style={[styles.monthSummaryContainer, { backgroundColor: colors.card, borderColor: colors.border }]}>
        <View style={styles.monthSummaryHeader}>
          <Text style={[styles.monthSummaryTitle, { color: colors.text }]}>
            üìä –ò—Ç–æ–≥–∏ {monthNames[selectedMonth]?.toLowerCase() || '–º–µ—Å—è—Ü–∞'}
          </Text>
        </View>
        
        <View style={styles.monthSummaryCalendar}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ */}
          <View style={styles.summaryWeekHeader}>
            {weekDayNames.map((day, index) => (
              <View key={index} style={[styles.summaryDayHeader, { width: dayWidth }]}>
                <Text style={[styles.summaryWeekdayText, { color: colors.textSecondary }]}>
                  {day}
                </Text>
              </View>
            ))}
          </View>
          
          {/* –ù–µ–¥–µ–ª–∏ */}
          {weeks.map((week, weekIndex) => (
            <View key={weekIndex} style={styles.summaryWeekRow}>
              {week.map((day, dayIndex) => {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                if (!day.isCurrentMonth) {
                  return (
                    <View key={dayIndex} style={[styles.summaryDayColumn, { width: dayWidth }]}>
                      {/* –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –¥–Ω–µ–π –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤ */}
                    </View>
                  );
                }

                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è
                const dayStats = calculateDayStatsWithArchive(day.date, allHabits);
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                const backgroundColor = getCalendarDayCellColor(dayStats.percentage, colors);
                
                // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –¥–Ω–µ–π –æ–∫–æ–ª–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                if (day.day >= 25 && day.day <= 28) {
                  console.log(`üîç RENDER Day ${day.day}:`);
                  console.log(`    day.date: ${day.date}`);
                  console.log(`    day.isToday: ${day.isToday}`);
                  console.log(`    day.isCurrentMonth: ${day.isCurrentMonth}`);
                }
                
                return (
                  <View key={dayIndex} style={[styles.summaryDayColumn, { width: dayWidth }]}>
                    <TouchableOpacity
                      style={[
                        styles.summaryDayCell,
                        { 
                          backgroundColor,
                          borderWidth: day.isToday ? 2 : 0,
                          borderColor: day.isToday ? colors.primary : 'transparent'
                        }
                      ]}
                      onPress={() => handleDayPress(day)}
                      activeOpacity={0.7}
                    >
                      <Text style={[
                        styles.summaryDayNumber,
                        { 
                          color: day.isToday ? colors.primary : colors.text,
                          fontWeight: day.isToday ? 'bold' : '600'
                        }
                      ]}>
                        {day.day}
                      </Text>
                      <Text style={[
                        styles.summaryDayStats,
                        { 
                          color: dayStats.percentage === 100 ? colors.success :
                                 dayStats.percentage >= 50 ? colors.warning :
                                 dayStats.percentage > 0 ? colors.error : colors.textSecondary
                        }
                      ]}>
                        {dayStats.total > 0 ? `${dayStats.completed}/${dayStats.total}` : '-'}
                      </Text>
                    </TouchableOpacity>
                  </View>
                );
              })}
            </View>
          ))}
        </View>
        
        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <View style={styles.summaryLegend}>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: colors.success + '30' }]} />
            <Text style={[styles.legendText, { color: colors.text }]}>100%</Text>
          </View>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: colors.warning + '25' }]} />
            <Text style={[styles.legendText, { color: colors.text }]}>50%+</Text>
          </View>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: colors.error + '20' }]} />
            <Text style={[styles.legendText, { color: colors.text }]}>0%+</Text>
          </View>
          <View style={styles.legendItem}>
            <View style={[styles.legendColor, { backgroundColor: colors.surface }]} />
            <Text style={[styles.legendText, { color: colors.text }]}>0%</Text>
          </View>
        </View>
      </View>
    );
  };

  // === –†–ï–ù–î–ï–† –ì–†–£–ü–ü–´ –ü–†–ò–í–´–ß–ï–ö ===
  const renderHabitsGroup = (habitsStats, title, titleColor) => {
    if (!habitsStats || habitsStats.length === 0) return null;
    
    return (
      <>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã */}
        <View style={[styles.groupHeader, { 
          backgroundColor: titleColor + '20',
          borderLeftColor: titleColor 
        }]}>
          <Text style={[styles.groupTitle, { color: titleColor }]}>
            {title} ({habitsStats.length})
          </Text>
        </View>
        
        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫ */}
        {habitsStats.map((habitStat) => (
          <TouchableOpacity
            key={habitStat.id}
            style={[
              styles.monthHabitCard,
              { 
                backgroundColor: colors.card,
                borderColor: habitStat.color + '60'
              }
            ]}
            onPress={() => handleHabitPress(habitStat)}
            activeOpacity={0.7}
          >
            <View style={styles.monthHabitHeader}>
              <View style={styles.monthHabitInfo}>
                <View style={styles.monthHabitTitleRow}>
                  <Text style={styles.monthHabitIcon}>{habitStat.icon}</Text>
                  <Text style={[styles.monthHabitName, { color: colors.text }]} numberOfLines={1}>
                    {habitStat.name}
                  </Text>
                  {habitStat.isArchived && (
                    <View style={[styles.archivedBadge, { backgroundColor: colors.textSecondary }]}>
                      <Text style={styles.archivedText}>–ó–ê–í–ï–†–®–ï–ù–û</Text>
                    </View>
                  )}
                </View>
                
                <View style={styles.monthHabitStats}>
                  {/* –ï–î–ò–ù–ê–Ø –°–¢–†–û–ö–ê: –§–∞–∫—Ç - –ü–ª–∞–Ω - –õ—É—á—à–∞—è —Å–µ—Ä–∏—è - % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                  <View style={styles.monthHabitStatsRow}>
                    {/* –§–∞–∫—Ç */}
                    <View style={styles.monthHabitStatItem}>
                      <Text style={[styles.monthHabitStatLabel, { color: colors.textSecondary }]}>
                        –§–∞–∫—Ç:
                      </Text>
                      <Text style={[styles.monthHabitStatValue, { color: colors.text }]}>
                        {formatLocalizedValue(habitStat.factValue, habitStat.type, habitStat.unit)}
                      </Text>
                    </View>

                    {/* –°–µ–ø–∞—Ä–∞—Ç–æ—Ä */}
                    <View style={[styles.monthHabitSeparator, { backgroundColor: colors.border }]} />

                    {/* –ü–ª–∞–Ω */}
                    <View style={styles.monthHabitStatItem}>
                      <Text style={[styles.monthHabitStatLabel, { color: colors.textSecondary }]}>
                        –ü–ª–∞–Ω:
                      </Text>
                      <Text style={[styles.monthHabitStatValue, { color: colors.text }]}>
                        {formatLocalizedValue(habitStat.planValue, habitStat.type, habitStat.unit)}
                      </Text>
                    </View>

                    {/* –°–µ–ø–∞—Ä–∞—Ç–æ—Ä */}
                    <View style={[styles.monthHabitSeparator, { backgroundColor: colors.border }]} />

                    {/* –õ—É—á—à–∞—è —Å–µ—Ä–∏—è */}
                    <View style={styles.monthHabitStatItem}>
                      <Text style={[styles.monthHabitStatLabel, { color: colors.textSecondary }]}>
                        –õ—É—á—à–∞—è —Å–µ—Ä–∏—è:
                      </Text>
                      <Text style={[styles.monthHabitStatValue, { color: colors.text }]}>
                        {calculateBestStreakForMonth(allHabits.find(h => h.id === habitStat.id), statisticsData.dates)}
                      </Text>
                    </View>

                    {/* –°–µ–ø–∞—Ä–∞—Ç–æ—Ä */}
                    <View style={[styles.monthHabitSeparator, { backgroundColor: colors.border }]} />

                    {/* % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                    <View style={styles.monthHabitStatItem}>
                      <Text style={[styles.monthHabitStatLabel, { color: colors.textSecondary }]}>
                        –í—ã–ø:
                      </Text>
                      <Text style={[styles.monthHabitStatValue, { 
                        color: habitStat.percentage === 100 ? colors.success :
                               habitStat.percentage >= 75 ? colors.warning :
                               habitStat.percentage >= 50 ? '#FF6B35' :
                               habitStat.percentage >= 25 ? colors.error : '#8B0000'
                      }]}>
                        {habitStat.percentage}%
                      </Text>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </TouchableOpacity>
        ))}
      </>
    );
  };

  // === –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† ===
  const renderMonthView = () => {
    const { activeHabitsStats, archivedHabitsStats } = statisticsData;
    
    return (
      <ScrollView style={styles.monthContainer} showsVerticalScrollIndicator={false}>
        {/* –û–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∏—Ç–æ–≥–∞–º–∏ –º–µ—Å—è—Ü–∞ */}
        {renderMonthSummaryCalendar()}
        
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <View style={styles.monthDivider}>
          <Text style={[styles.monthDividerText, { color: colors.text }]}>
            üìã –ò—Ç–æ–≥–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
          </Text>
        </View>
        
        {/* –ê–ö–¢–ò–í–ù–´–ï –ü–†–ò–í–´–ß–ö–ò */}
        {renderHabitsGroup(
          activeHabitsStats, 
          "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", 
          colors.success
        )}
        
        {/* –ê–†–•–ò–í–ò–†–û–í–ê–ù–ù–´–ï –ü–†–ò–í–´–ß–ö–ò (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
        {renderHabitsGroup(
          archivedHabitsStats, 
          "üìÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", 
          colors.textSecondary
        )}
        
        {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {activeHabitsStats.length === 0 && archivedHabitsStats.length === 0 && (
          <View style={styles.emptyState}>
            <Text style={styles.emptyIcon}>üìù</Text>
            <Text style={[styles.emptyText, { color: colors.textSecondary }]}>
              –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –ø—Ä–∏–≤—ã—á–µ–∫
            </Text>
          </View>
        )}
      </ScrollView>
    );
  };

  // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –° –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò ===
  const renderDayDetailsModal = () => (
    <Modal
      visible={showDayModal}
      transparent={true}
      animationType="slide"
      onRequestClose={() => setShowDayModal(false)}
    >
      <View style={styles.modalFullOverlay}>
        <View style={[styles.modalFullContainer, { backgroundColor: colors.card }]}>
          
          {/* –ó–ê–ì–û–õ–û–í–û–ö - –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô */}
          <View style={[styles.modalFixedHeader, { backgroundColor: colors.surface, borderBottomColor: colors.border }]}>
            <TouchableOpacity
              style={[styles.modalCloseBtn, { backgroundColor: colors.error }]}
              onPress={() => setShowDayModal(false)}
            >
              <Ionicons name="close" size={24} color="#ffffff" />
            </TouchableOpacity>
            
            {selectedDayData && (
              <View style={styles.dayModalHeaderContent}>
                <Text style={[styles.modalHeaderTitle, { color: colors.text }]}>
                  {selectedDayData.day} {monthNames[selectedMonth]?.toLowerCase()}
                </Text>
                {selectedDayData.isToday && (
                  <View style={[styles.modalTodayBadge, { backgroundColor: colors.primary }]}>
                    <Text style={styles.modalTodayText}>–°–ï–ì–û–î–ù–Ø</Text>
                  </View>
                )}
                
                <View style={[styles.modalStatsRow, { backgroundColor: colors.card }]}>
                  <Text style={[styles.modalStatsLabel, { color: colors.text }]}>
                    –í—ã–ø–æ–ª–Ω–µ–Ω–æ:
                  </Text>
                  <Text style={[styles.modalStatsValue, { 
                    color: selectedDayData.stats.percentage === 100 ? colors.success :
                           selectedDayData.stats.percentage >= 50 ? colors.warning : colors.error
                  }]}>
                    {selectedDayData.stats.completed} –∏–∑ {selectedDayData.stats.total} ({selectedDayData.stats.percentage}%)
                  </Text>
                </View>
              </View>
            )}
          </View>

          {/* –°–û–î–ï–†–ñ–ò–ú–û–ï */}
          <ScrollView 
            style={styles.modalScrollableContent}
            contentContainerStyle={styles.modalScrollPadding}
            showsVerticalScrollIndicator={false}
          >
            {selectedDayData && (
              <>
                {/* –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫ */}
                <View style={[styles.modalTableHeader, { backgroundColor: colors.surface, borderColor: colors.border }]}>
                  <Text style={[styles.modalHeaderText, { color: colors.text, flex: 2.5 }]}>
                    –ü—Ä–∏–≤—ã—á–∫–∞
                  </Text>
                  <Text style={[styles.modalHeaderText, { color: colors.text, flex: 2 }]}>
                    –§–∞–∫—Ç
                  </Text>
                  <Text style={[styles.modalHeaderText, { color: colors.text, flex: 2 }]}>
                    –ü–ª–∞–Ω
                  </Text>
                  <Text style={[styles.modalHeaderText, { color: colors.text, flex: 1.5 }]}>
                    –°—Ç–∞—Ç—É—Å
                  </Text>
                </View>

                {selectedDayData.habits.length > 0 ? selectedDayData.habits.map((habit) => {
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∏–∫–æ–Ω–∫–∏
                  let statusIcon = 'close-circle';
                  let statusColor = colors.error;
                  let isOverachieved = false;

                  if (habit.status === 'completed') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
                    if (habit.type === 'number' && habit.factValue > habit.planValue) {
                      isOverachieved = true;
                      statusIcon = 'flame';
                      statusColor = '#FF4500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –æ–≥–æ–Ω—å–∫–∞
                    } else {
                      statusIcon = 'checkmark-circle';
                      statusColor = colors.success;
                    }
                  } else if (habit.status === 'partial') {
                    statusIcon = 'remove-circle';
                    statusColor = colors.warning;
                  }

                  return (
                    <View key={habit.id} style={[styles.modalHabitRow, { 
                      backgroundColor: colors.card,
                      borderBottomColor: colors.border,
                      alignItems: 'center' // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                    }]}>
                      {/* –ü–†–ò–í–´–ß–ö–ê */}
                      <View style={[styles.modalHabitCell, { flex: 2.5, flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'flex-start' }]}>
                        <Text style={styles.modalHabitIcon}>{habit.icon}</Text>
                        <View style={styles.modalHabitNameContainer}>
                          <Text style={[styles.modalHabitName, { color: colors.text }]} numberOfLines={3}>
                            {habit.name}
                          </Text>
                          {habit.isArchived && (
                            <Text style={[styles.modalArchivedNote, { color: colors.textSecondary }]}>
                              (–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)
                            </Text>
                          )}
                        </View>
                      </View>
                      
                      {/* –§–ê–ö–¢ */}
                      <View style={[styles.modalHabitCell, { flex: 2 }]}>
                        <Text style={[styles.modalCellText, { 
                          color: habit.factValue > 0 ? colors.text : colors.textSecondary
                        }]}>
                          {habit.factValue > 0 ? formatLocalizedValue(habit.factValue, habit.type, habit.unit) : '0'}
                        </Text>
                      </View>

                      {/* –ü–õ–ê–ù */}
                      <View style={[styles.modalHabitCell, { flex: 2 }]}>
                        <Text style={[styles.modalCellText, { color: colors.textSecondary }]} numberOfLines={2}>
                          {habit.type === 'boolean' ? '–í—ã–ø–æ–ª–Ω–∏—Ç—å' :
                           habit.type === 'weight' ? '–ó–∞–ø–∏—Å–∞—Ç—å' :
                           formatLocalizedValue(habit.planValue, habit.type, habit.unit)}
                        </Text>
                      </View>
                      
                      {/* –°–¢–ê–¢–£–° */}
                      <View style={[styles.modalHabitCell, { flex: 1.5 }]}>
                        <Ionicons 
                          name={statusIcon}
                          size={24}
                          color={statusColor}
                        />
                      </View>
                    </View>
                  );
                }) : (
                  <View style={styles.modalEmptyState}>
                    <Text style={styles.modalEmptyIcon}>üìù</Text>
                    <Text style={[styles.modalEmptyText, { color: colors.textSecondary }]}>
                      –í —ç—Ç–æ—Ç –¥–µ–Ω—å —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
                    </Text>
                  </View>
                )}

                {/* –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ */}
                <View style={styles.modalBottomSpace} />
              </>
            )}
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê –ü–†–ò–í–´–ß–ö–ò ===
  const renderHabitDetailsModal = () => (
    <Modal
      visible={showHabitModal}
      transparent={true}
      animationType="slide"
      onRequestClose={() => setShowHabitModal(false)}
    >
      <View style={styles.modalFullOverlay}>
        <View style={[styles.modalFullContainer, { backgroundColor: colors.card }]}>
          
          {/* –ó–ê–ì–û–õ–û–í–û–ö */}
          <View style={[styles.modalFixedHeader, { backgroundColor: colors.surface, borderBottomColor: colors.border }]}>
            <TouchableOpacity
              style={[styles.modalCloseBtn, { backgroundColor: colors.error }]}
              onPress={() => setShowHabitModal(false)}
            >
              <Ionicons name="close" size={24} color="#ffffff" />
            </TouchableOpacity>
            
            {selectedHabitData && (
              <View style={styles.habitModalHeaderContent}>
                <Text style={styles.habitModalIcon}>{selectedHabitData.icon}</Text>
                <Text style={[styles.modalHeaderTitle, { color: colors.text, textAlign: 'center', fontSize: 18 }]}>
                  {selectedHabitData.name}
                </Text>
                {selectedHabitData.isArchived && (
                  <View style={[styles.archivedBadge, { backgroundColor: colors.textSecondary }]}>
                    <Text style={styles.archivedText}>–ó–ê–í–ï–†–®–ï–ù–û</Text>
                  </View>
                )}
              </View>
            )}
          </View>

          {/* –°–û–î–ï–†–ñ–ò–ú–û–ï */}
          <ScrollView 
            style={styles.modalScrollableContent}
            contentContainerStyle={styles.modalScrollPadding}
            showsVerticalScrollIndicator={false}
          >
            {selectedHabitData && (
              <>
                {/* –°–ï–ö–¶–ò–Ø 1: –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <View style={[styles.modalSection, { backgroundColor: colors.surface }]}>
                  <TouchableOpacity 
                    style={styles.sectionHeader}
                    onPress={() => toggleSection('stats')}
                    activeOpacity={0.7}
                  >
                    <View style={styles.sectionHeaderContent}>
                      <Text style={[styles.modalSectionTitle, { color: colors.text }]}>
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞
                      </Text>
                      <Ionicons 
                        name={expandedSections.stats ? "chevron-up" : "chevron-down"} 
                        size={20} 
                        color={colors.textSecondary} 
                      />
                    </View>
                  </TouchableOpacity>
                  
                  {expandedSections.stats && (
                    <View style={styles.modalStatsContainer}>
                      {/* –ü–ï–†–í–ê–Ø –°–¢–†–û–ö–ê: –§–∞–∫—Ç - –ü–ª–∞–Ω - % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                      <View style={styles.modalStatsRow}>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üìä –§–∞–∫—Ç
                          </Text>
                          <Text style={[styles.modalStatValue, { color: colors.success }]}>
                            {formatLocalizedValue(selectedHabitData.factValue, selectedHabitData.type, selectedHabitData.unit)}
                          </Text>
                        </View>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üéØ –ü–ª–∞–Ω
                          </Text>
                          <Text style={[styles.modalStatValue, { color: colors.primary }]}>
                            {formatLocalizedValue(selectedHabitData.planValue, selectedHabitData.type, selectedHabitData.unit)}
                          </Text>
                        </View>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üìà % –≤—ã–ø
                          </Text>
                          <Text style={[styles.modalStatValue, { 
                            color: selectedHabitData.percentage === 100 ? colors.success :
                                   selectedHabitData.percentage >= 75 ? colors.warning :
                                   selectedHabitData.percentage >= 50 ? '#FF6B35' :
                                   selectedHabitData.percentage >= 25 ? colors.error : '#8B0000'
                          }]}>
                            {selectedHabitData.percentage}%
                          </Text>
                        </View>
                      </View>

                      {/* –°–ï–ü–ê–†–ê–¢–û–† */}
                      <View style={[styles.modalStatsSeparator, { backgroundColor: colors.border }]} />

                      {/* –í–¢–û–†–ê–Ø –°–¢–†–û–ö–ê: –î–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –õ—É—á—à–∞—è —Å–µ—Ä–∏—è - –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è */}
                      <View style={styles.modalStatsRow}>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üìÖ –î–Ω–µ–π –≤—ã–ø
                          </Text>
                          <Text style={[styles.modalStatValue, { color: colors.warning }]}>
                            {selectedHabitData.completedDays}
                          </Text>
                        </View>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è
                          </Text>
                          <Text style={[styles.modalStatValue, { color: colors.primary }]}>
                            {calculateBestStreakForMonth(selectedHabitData, statisticsData.dates)}
                          </Text>
                        </View>
                        <View style={styles.modalStatItem}>
                          <Text style={[styles.modalStatLabel, { color: colors.text }]}>
                            üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
                          </Text>
                          <Text style={[styles.modalStatValue, { color: colors.error }]}>
                            {selectedHabitData.streak}
                          </Text>
                        </View>
                      </View>
                    </View>
                  )}
                </View>

                {/* –°–ï–ö–¶–ò–Ø 2: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ (–ü–ï–†–ï–ù–ï–°–ï–ù–ê –í–ü–ï–†–ï–î) */}
                <View style={[styles.modalSection, { backgroundColor: colors.surface }]}>
                  <TouchableOpacity 
                    style={styles.sectionHeader}
                    onPress={() => toggleSection('daily')}
                    activeOpacity={0.7}
                  >
                    <View style={styles.sectionHeaderContent}>
                      <Text style={[styles.modalSectionTitle, { color: colors.text }]}>
                        üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏
                      </Text>
                      <Ionicons 
                        name={expandedSections.daily ? "chevron-up" : "chevron-down"} 
                        size={20} 
                        color={colors.textSecondary} 
                      />
                    </View>
                  </TouchableOpacity>
                  
                  {expandedSections.daily && (
                    <View style={styles.dailyStatsContainer}>
                      {/* –°–£–ú–ú–ê–†–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê */}
                      <View style={[styles.dailyStatsSummary, { backgroundColor: colors.card, borderColor: colors.border }]}>
                        <View style={styles.summaryItem}>
                          <Text style={[styles.summaryValue, { color: colors.primary }]}>
                            {selectedHabitData.planValue}
                          </Text>
                          <Text style={[styles.summaryLabel, { color: colors.text }]}>
                            –ü–ª–∞–Ω
                          </Text>
                        </View>
                        <View style={styles.summaryItem}>
                          <Text style={[styles.summaryValue, { color: colors.success }]}>
                            {formatLocalizedValue(selectedHabitData.factValue, selectedHabitData.type, selectedHabitData.unit)}
                          </Text>
                          <Text style={[styles.summaryLabel, { color: colors.text }]}>
                            –§–∞–∫—Ç
                          </Text>
                        </View>
                        <View style={styles.summaryItem}>
                          <Text style={[styles.summaryValue, { color: colors.warning }]}>
                            {selectedHabitData.percentage}%
                          </Text>
                          <Text style={[styles.summaryLabel, { color: colors.text }]}>
                            –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                          </Text>
                        </View>
                      </View>

                      {/* –ó–ê–ì–û–õ–û–í–û–ö –¢–ê–ë–õ–ò–¶–´ */}
                      <View style={[styles.dailyStatsHeader, { backgroundColor: colors.card, borderColor: colors.border }]}>
                        <View style={[styles.dailyStatsCell, { flex: 1 }]}>
                          <Text style={[styles.dailyStatsHeaderText, { color: colors.text }]}>
                            –î–µ–Ω—å
                          </Text>
                        </View>
                        <View style={[styles.dailyStatsCell, { flex: 1.5 }]}>
                          <Text style={[styles.dailyStatsHeaderText, { color: colors.text }]}>
                            –ü–ª–∞–Ω
                          </Text>
                        </View>
                        <View style={[styles.dailyStatsCell, { flex: 1.5 }]}>
                          <Text style={[styles.dailyStatsHeaderText, { color: colors.text }]}>
                            –§–∞–∫—Ç
                          </Text>
                        </View>
                        <View style={[styles.dailyStatsCell, { flex: 1 }]}>
                          <Text style={[styles.dailyStatsHeaderText, { color: colors.text }]}>
                            %
                          </Text>
                        </View>
                      </View>

                      {/* –î–ê–ù–ù–´–ï –ü–û –î–ù–Ø–ú */}
                      <ScrollView style={[styles.dailyStatsList, { backgroundColor: colors.card }]} nestedScrollEnabled>
                        {(() => {
                          const { dates } = statisticsData;
                          return dates.map((dayDate, index) => {
                            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                            const completion = selectedHabitData.completions?.[dayDate.date];
                            
                            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω, —Ñ–∞–∫—Ç –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                            let planValue = 1;
                            let factValue = 0;
                            let percentage = 0;
                            let factDisplay = '-';
                            let planDisplay = '-';
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                            const habitCreated = new Date(selectedHabitData.createdAt);
                            const currentDate = new Date(dayDate.date);
                            const habitCreatedDate = new Date(habitCreated.getFullYear(), habitCreated.getMonth(), habitCreated.getDate());
                            const currentDateOnly = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                            
                            // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
                            if (habitCreatedDate > currentDateOnly) {
                              planDisplay = '–ù–µ —Å–æ–∑–¥–∞–Ω–∞';
                              factDisplay = '-';
                              percentage = 0;
                            } 
                            // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
                            else if (selectedHabitData.isArchived && selectedHabitData.archivedAt) {
                              const archivedDate = new Date(selectedHabitData.archivedAt);
                              const archivedDateOnly = new Date(archivedDate.getFullYear(), archivedDate.getMonth(), archivedDate.getDate());
                              if (archivedDateOnly < currentDateOnly) {
                                planDisplay = '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
                                factDisplay = '-';
                                percentage = 0;
                              }
                            } else {
                              // –ü—Ä–∏–≤—ã—á–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω/—Ñ–∞–∫—Ç
                              if (selectedHabitData.type === 'boolean') {
                                planValue = 1;
                                planDisplay = '–í—ã–ø–æ–ª–Ω–∏—Ç—å';
                                if (completion === true) {
                                  factValue = 1;
                                  factDisplay = '‚úì';
                                  percentage = 100;
                                } else {
                                  factDisplay = '‚úó';
                                  percentage = 0;
                                }
                              } else if (selectedHabitData.type === 'weight') {
                                planValue = 1;
                                planDisplay = '–ó–∞–ø–∏—Å–∞—Ç—å';
                                if (typeof completion === 'object' && completion.weight && completion.weight > 0) {
                                  factValue = 1;
                                  factDisplay = `${completion.weight.toFixed(1)} –∫–≥`;
                                  percentage = 100;
                                } else {
                                  factDisplay = '–ù–µ –∑–∞–ø–∏—Å–∞–Ω';
                                  percentage = 0;
                                }
                              } else if (selectedHabitData.type === 'number') {
                                planValue = selectedHabitData.targetValue || 1;
                                planDisplay = `${planValue} ${translateUnit(selectedHabitData.unit, planValue)}`;
                                if (completion && completion.value && completion.value > 0) {
                                  factValue = completion.value;
                                  factDisplay = `${factValue} ${translateUnit(selectedHabitData.unit, factValue)}`;
                                  percentage = Math.round((factValue / planValue) * 100);
                                } else {
                                  factDisplay = '0';
                                  percentage = 0;
                                }
                              }
                            }

                            const percentageColor = percentage === 100 ? colors.success :
                                                  percentage >= 50 ? colors.warning :
                                                  percentage > 0 ? colors.error : colors.textSecondary;

                            return (
                              <View key={index} style={[styles.dailyStatsRow, { borderBottomColor: colors.border }]}>
                                <View style={[styles.dailyStatsCell, { flex: 1 }]}>
                                  <Text style={[
                                    styles.dailyStatsDayText,
                                    { 
                                      color: dayDate.isToday ? colors.primary : colors.text,
                                      fontWeight: dayDate.isToday ? 'bold' : '600'
                                    }
                                  ]}>
                                    {dayDate.day}
                                  </Text>
                                </View>
                                
                                <View style={[styles.dailyStatsCell, { flex: 1.5 }]}>
                                  <Text style={[
                                    styles.dailyStatsText,
                                    { 
                                      color: colors.textSecondary,
                                      fontWeight: 'normal'
                                    }
                                  ]} numberOfLines={2}>
                                    {planDisplay}
                                  </Text>
                                </View>
                                
                                <View style={[styles.dailyStatsCell, { flex: 1.5 }]}>
                                  <Text style={[
                                    styles.dailyStatsText,
                                    { 
                                      color: factValue > 0 ? colors.text : colors.textSecondary,
                                      fontWeight: factValue > 0 ? '600' : 'normal'
                                    }
                                  ]} numberOfLines={2}>
                                    {factDisplay}
                                  </Text>
                                </View>
                                
                                <View style={[styles.dailyStatsCell, { flex: 1 }]}>
                                  <Text style={[
                                    styles.dailyStatsPercentage,
                                    { 
                                      color: percentageColor,
                                      fontWeight: 'bold'
                                    }
                                  ]}>
                                    {percentage}%
                                  </Text>
                                </View>
                              </View>
                            );
                          });
                        })()}
                      </ScrollView>
                    </View>
                  )}
                </View>

                {/* –°–ï–ö–¶–ò–Ø 3: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ */}
                <View style={[styles.modalSection, { backgroundColor: colors.surface }]}>
                  <TouchableOpacity 
                    style={styles.sectionHeader}
                    onPress={() => toggleSection('info')}
                    activeOpacity={0.7}
                  >
                    <View style={styles.sectionHeaderContent}>
                      <Text style={[styles.modalSectionTitle, { color: colors.text }]}>
                        üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ
                      </Text>
                      <Ionicons 
                        name={expandedSections.info ? "chevron-up" : "chevron-down"} 
                        size={20} 
                        color={colors.textSecondary} 
                      />
                    </View>
                  </TouchableOpacity>
                  
                  {expandedSections.info && (
                    <View style={styles.habitInfoGrid}>
                      <View style={styles.habitInfoRow}>
                        <Text style={[styles.habitInfoLabel, { color: colors.textSecondary }]}>–¢–∏–ø:</Text>
                        <Text style={[styles.habitInfoValue, { color: colors.text }]}>
                          {selectedHabitData.type === 'boolean' ? '–ë—É–ª–µ–≤–∞—è (–¥–∞/–Ω–µ—Ç)' :
                           selectedHabitData.type === 'weight' ? '–í–µ—Å' : '–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è'}
                        </Text>
                      </View>
                      
                      {selectedHabitData.type !== 'boolean' && (
                        <View style={styles.habitInfoRow}>
                          <Text style={[styles.habitInfoLabel, { color: colors.textSecondary }]}>–¶–µ–ª—å:</Text>
                          <Text style={[styles.habitInfoValue, { color: colors.text }]}>
                            {selectedHabitData.targetValue} {translateUnit(selectedHabitData.unit, selectedHabitData.targetValue)}
                          </Text>
                        </View>
                      )}
                      
                      <View style={styles.habitInfoRow}>
                        <Text style={[styles.habitInfoLabel, { color: colors.textSecondary }]}>–ü–ª–∞–Ω/–§–∞–∫—Ç:</Text>
                        <Text style={[styles.habitInfoValue, { color: colors.text }]}>
                          {formatLocalizedValue(selectedHabitData.factValue, selectedHabitData.type, selectedHabitData.unit)} –∏–∑ {formatLocalizedValue(selectedHabitData.planValue, selectedHabitData.type, selectedHabitData.unit)}
                        </Text>
                      </View>
                      
                      <View style={styles.habitInfoRow}>
                        <Text style={[styles.habitInfoLabel, { color: colors.textSecondary }]}>–°–æ–∑–¥–∞–Ω–∞:</Text>
                        <Text style={[styles.habitInfoValue, { color: colors.text }]}>
                          {new Date(selectedHabitData.createdAt).toLocaleDateString('ru-RU', {
                            day: 'numeric',
                            month: 'long',
                            year: 'numeric'
                          })}
                        </Text>
                      </View>
                    </View>
                  )}
                </View>

                {/* –°–ï–ö–¶–ò–Ø 4: –ê–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Å–∞–π—Ç—ã */}
                <View style={[styles.modalSection, { backgroundColor: colors.surface }]}>
                  <TouchableOpacity 
                    style={styles.sectionHeader}
                    onPress={() => toggleSection('insights')}
                    activeOpacity={0.7}
                  >
                    <View style={styles.sectionHeaderContent}>
                      <Text style={[styles.modalSectionTitle, { color: colors.text }]}>
                        üí° –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                      </Text>
                      <Ionicons 
                        name={expandedSections.insights ? "chevron-up" : "chevron-down"} 
                        size={20} 
                        color={colors.textSecondary} 
                      />
                    </View>
                  </TouchableOpacity>
                  
                  {expandedSections.insights && (
                    <View style={styles.insightsContainer}>
                      {selectedHabitData.percentage >= 90 && (
                        <View style={[styles.insightItem, { backgroundColor: colors.success + '20' }]}>
                          <Text style={styles.insightIcon}>üéâ</Text>
                          <Text style={[styles.insightText, { color: colors.text }]}>
                            –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ —Å–ª–µ–¥—É–µ—Ç–µ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ.
                          </Text>
                        </View>
                      )}
                      
                      {selectedHabitData.percentage >= 70 && selectedHabitData.percentage < 90 && (
                        <View style={[styles.insightItem, { backgroundColor: colors.warning + '20' }]}>
                          <Text style={styles.insightIcon}>üëç</Text>
                          <Text style={[styles.insightText, { color: colors.text }]}>
                            –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º.
                          </Text>
                        </View>
                      )}
                      
                      {selectedHabitData.percentage < 70 && (
                        <View style={[styles.insightItem, { backgroundColor: colors.error + '20' }]}>
                          <Text style={styles.insightIcon}>üí™</Text>
                          <Text style={[styles.insightText, { color: colors.text }]}>
                            –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –º–∞–ª–æ–≥–æ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.
                          </Text>
                        </View>
                      )}
                      
                      {selectedHabitData.streak >= 7 && (
                        <View style={[styles.insightItem, { backgroundColor: colors.primary + '20' }]}>
                          <Text style={styles.insightIcon}>üî•</Text>
                          <Text style={[styles.insightText, { color: colors.text }]}>
                            –£ –≤–∞—Å —Å–µ—Ä–∏—è –≤ {selectedHabitData.streak} –¥–Ω–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.
                          </Text>
                        </View>
                      )}
                      
                      {selectedHabitData.factValue > selectedHabitData.planValue && (
                        <View style={[styles.insightItem, { backgroundColor: colors.success + '20' }]}>
                          <Text style={styles.insightIcon}>üöÄ</Text>
                          <Text style={[styles.insightText, { color: colors.text }]}>
                            {selectedHabitData.type === 'boolean' ? 
                              '–í—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å—Ç–∞–±–∏–ª—å–Ω–æ!' :
                              selectedHabitData.factValue > selectedHabitData.planValue ?
                              `–¶–µ–ª—å –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${Math.round(((selectedHabitData.factValue - selectedHabitData.planValue) / selectedHabitData.planValue) * 100)}%!` :
                             `–î–æ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${selectedHabitData.planValue - selectedHabitData.factValue} ${translateUnit(selectedHabitData.unit, selectedHabitData.planValue - selectedHabitData.factValue)}.`}
                          </Text>
                        </View>
                      )}
                    </View>
                  )}
                </View>

                {/* –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ */}
                <View style={styles.modalBottomSpace} />
              </>
            )}
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  // === –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† ===
  return (
    <View style={styles.container}>
      {renderMonthView()}
      {renderDayDetailsModal()}
      {renderHabitDetailsModal()}
    </View>
  );
};

// === –ü–û–õ–ù–´–ï –°–¢–ò–õ–ò ===
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  
  // === –ú–ï–°–Ø–ß–ù–´–ô –ö–û–ù–¢–ï–ô–ù–ï–† ===
  monthContainer: {
    flex: 1,
    marginHorizontal: -SPACING.md,
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.sm,
  },

  // === –û–ë–©–ò–ô –ö–ê–õ–ï–ù–î–ê–†–¨ –ú–ï–°–Ø–¶–ê –° –ò–¢–û–ì–ê–ú–ò ===
  monthSummaryContainer: {
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    padding: SPACING.md,
    marginBottom: SPACING.lg,
  },

  monthSummaryHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.sm,
  },

  monthSummaryTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },

  monthSummaryCalendar: {
    marginTop: SPACING.sm,
    paddingHorizontal: SPACING.sm,
  },

  summaryWeekHeader: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: SPACING.sm,
  },

  summaryDayHeader: {
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 0.5,
  },

  summaryWeekdayText: {
    fontSize: 10,
    fontWeight: 'bold',
  },

  summaryWeekRow: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: SPACING.xs,
  },

  summaryDayColumn: {
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 0.5,
  },

  summaryDayCell: {
    width: '95%',
    minHeight: 32,
    borderRadius: BORDER_RADIUS.sm,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: SPACING.xs,
  },

  summaryDayNumber: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: 1,
  },

  summaryDayStats: {
    fontSize: 9,
    fontWeight: 'bold',
  },

  summaryLegend: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingTop: SPACING.sm,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0,0,0,0.1)',
  },

  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: SPACING.xs,
  },

  legendColor: {
    width: 12,
    height: 12,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.2)',
  },

  legendText: {
    fontSize: 10,
    fontWeight: '500',
  },

  monthDivider: {
    alignItems: 'center',
    marginVertical: SPACING.lg,
    paddingVertical: SPACING.md,
  },

  monthDividerText: {
    fontSize: 16,
    fontWeight: '700',
    letterSpacing: 0.5,
  },

  // === –ì–†–£–ü–ü–´ –ü–†–ò–í–´–ß–ï–ö ===
  groupHeader: {
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    marginBottom: SPACING.md,
    marginTop: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    marginHorizontal: SPACING.xs,
    borderLeftWidth: 4,
  },

  groupTitle: {
    fontSize: 14,
    fontWeight: '700',
    textAlign: 'center',
    letterSpacing: 0.5,
  },

  // === –ö–ê–†–¢–û–ß–ö–ò –ü–†–ò–í–´–ß–ï–ö –ú–ï–°–Ø–¶–ê ===
  monthHabitCard: {
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    padding: SPACING.md,
    marginBottom: SPACING.md,
    marginHorizontal: SPACING.xs,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },

  monthHabitHeader: {
    flexDirection: 'column',
  },

  monthHabitInfo: {
    flex: 1,
  },

  monthHabitTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.xs,
  },

  monthHabitIcon: {
    fontSize: 16,
    marginRight: SPACING.sm,
  },

  monthHabitName: {
    fontSize: 14,
    fontWeight: '600',
    flex: 1,
  },

  monthHabitStats: {
    marginTop: SPACING.xs,
  },

  monthHabitStatsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: SPACING.sm,
    marginTop: SPACING.xs,
  },

  monthHabitStatItem: {
    alignItems: 'center',
    flex: 1,
    paddingHorizontal: SPACING.xs,
    minHeight: 45,
    justifyContent: 'center',
  },

  monthHabitStatLabel: {
    fontSize: 10,
    fontWeight: '500',
    textAlign: 'center',
    marginBottom: 4,
    lineHeight: 12,
  },

  monthHabitStatValue: {
    fontSize: 12,
    fontWeight: '600',
    textAlign: 'center',
    lineHeight: 16,
  },

  monthHabitSeparator: {
    width: 1,
    height: 35,
    marginHorizontal: SPACING.xs,
    opacity: 0.3,
  },

  // === –ü–£–°–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
  emptyState: {
    alignItems: 'center',
    paddingVertical: SPACING.xxxl,
  },

  emptyIcon: {
    fontSize: 48,
    marginBottom: SPACING.md,
  },

  emptyText: {
    fontSize: 16,
    textAlign: 'center',
    fontStyle: 'italic',
  },

  // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
  modalFullOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
  },

  modalFullContainer: {
    flex: 1,
    marginTop: 40, // –û—Ç—Å—Ç—É–ø –æ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
  },

  modalFixedHeader: {
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
    minHeight: 80,
    position: 'relative',
  },

  modalCloseBtn: {
    position: 'absolute',
    top: SPACING.md,
    right: SPACING.lg,
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–Ω—è
  dayModalHeaderContent: {
    alignItems: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    justifyContent: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    paddingTop: SPACING.sm,
    paddingHorizontal: 60, // –û—Ç—Å—Ç—É–ø—ã —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  },

  habitModalHeaderContent: {
    alignItems: 'center',
    marginTop: SPACING.xs,
    marginRight: 60, // –ú–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    paddingVertical: SPACING.sm,
  },

  modalTableHeader: {
    flexDirection: 'row',
    paddingHorizontal: SPACING.lg,
    paddingVertical: SPACING.md,
    borderBottomWidth: 1,
  },

  modalHeaderTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: SPACING.xs,
    textAlign: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  },

  modalTodayBadge: {
    alignSelf: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º badge
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    borderRadius: BORDER_RADIUS.md,
    marginBottom: SPACING.sm,
  },

  modalTodayText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '600',
  },

  modalStatsRow: {
    flexDirection: 'row',
    justifyContent: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    alignItems: 'center',
    paddingHorizontal: SPACING.md,
    paddingVertical: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    gap: SPACING.md, // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  },

  modalStatsLabel: {
    fontSize: 16,
    fontWeight: '600',
  },

  modalStatsValue: {
    fontSize: 18,
    fontWeight: 'bold',
  },

  modalHeaderText: {
    fontSize: 14,
    fontWeight: 'bold',
    textAlign: 'center',
  },

  modalScrollableContent: {
    flex: 1,
  },

  modalScrollPadding: {
    paddingHorizontal: SPACING.md,
    paddingBottom: SPACING.xxxl,
  },

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2 –∏ 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏
  modalHabitRow: {
    flexDirection: 'row',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    marginHorizontal: SPACING.xs,
    marginVertical: 2,
    borderRadius: BORDER_RADIUS.sm,
    borderBottomWidth: 1,
    minHeight: 50, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  },

  modalHabitCell: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: SPACING.xs,
  },

  modalHabitIcon: {
    fontSize: 18,
    marginRight: SPACING.sm,
    marginTop: 2, // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
  },

  modalHabitNameContainer: {
    flex: 1,
    justifyContent: 'flex-start', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ö—É
  },

  modalHabitName: {
    fontSize: 14,
    fontWeight: '500',
    textAlign: 'left',
    lineHeight: 18, // –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ
  },

  modalArchivedNote: {
    fontSize: 11,
    fontStyle: 'italic',
    marginTop: 2,
  },

  modalCellText: {
    fontSize: 13,
    fontWeight: '500',
    textAlign: 'center',
    lineHeight: 16,
  },

  modalEmptyState: {
    alignItems: 'center',
    paddingVertical: SPACING.xxxl,
  },

  modalEmptyIcon: {
    fontSize: 64,
    marginBottom: SPACING.lg,
  },

  modalEmptyText: {
    fontSize: 16,
    textAlign: 'center',
    fontStyle: 'italic',
    paddingHorizontal: SPACING.lg,
  },

  modalBottomSpace: {
    height: SPACING.xxxl,
  },

  // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–ï–¢–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê –ü–†–ò–í–´–ß–ö–ò ===
  habitModalIcon: {
    fontSize: 24,
    marginBottom: SPACING.xs,
  },

  archivedBadge: {
    paddingHorizontal: SPACING.sm,
    paddingVertical: SPACING.xs,
    borderRadius: BORDER_RADIUS.md,
    marginLeft: SPACING.sm,
    alignSelf: 'center',
  },

  archivedText: {
    color: '#ffffff',
    fontSize: 9,
    fontWeight: '600',
    textAlign: 'center',
  },

  modalSection: {
    padding: SPACING.lg,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.md,
    marginHorizontal: SPACING.xs,
  },

  // === –†–ê–°–ö–†–´–í–ê–Æ–©–ò–ï–°–Ø –°–ï–ö–¶–ò–ò ===
  sectionHeader: {
    marginBottom: SPACING.md,
  },

  sectionHeaderContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },

  modalSectionTitle: {
    fontSize: 16,
    fontWeight: '700',
    textAlign: 'left',
  },

  modalStatsContainer: {
    marginTop: SPACING.sm,
  },

  modalStatsSeparator: {
    height: 1,
    marginVertical: SPACING.md,
    opacity: 0.3,
  },

  modalStatItem: {
    alignItems: 'center',
    flex: 1,
    paddingHorizontal: SPACING.xs,
  },

  modalStatValue: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 4,
    textAlign: 'center',
  },

  modalStatLabel: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
    lineHeight: 16,
  },

  // === –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ò–¢–û–ì–ò ===
  dailyStatsContainer: {
    marginTop: SPACING.sm,
  },

  dailyStatsSummary: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    borderWidth: 1,
    marginBottom: SPACING.md,
  },

  summaryItem: {
    alignItems: 'center',
    flex: 1,
  },

  summaryValue: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
  },

  summaryLabel: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
    lineHeight: 16,
  },

  dailyStatsHeader: {
    flexDirection: 'row',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    borderRadius: BORDER_RADIUS.sm,
    borderWidth: 1,
    marginBottom: SPACING.xs,
  },

  dailyStatsHeaderText: {
    fontSize: 14,
    fontWeight: 'bold',
    textAlign: 'center',
  },

  dailyStatsList: {
    maxHeight: 280,
    borderRadius: BORDER_RADIUS.sm,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.1)',
  },

  dailyStatsRow: {
    flexDirection: 'row',
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.md,
    borderBottomWidth: 0.5,
    minHeight: 50,
    alignItems: 'center',
  },

  dailyStatsCell: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: SPACING.xs,
  },

  dailyStatsDayText: {
    fontSize: 16,
    textAlign: 'center',
    fontWeight: '600',
  },

  dailyStatsText: {
    fontSize: 13,
    textAlign: 'center',
    lineHeight: 18,
  },

  dailyStatsPercentage: {
    fontSize: 15,
    textAlign: 'center',
    fontWeight: 'bold',
  },

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–ò–í–´–ß–ö–ò ===
  habitInfoGrid: {
    gap: SPACING.md,
  },

  habitInfoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: SPACING.sm,
  },

  habitInfoLabel: {
    fontSize: 15,
    fontWeight: '500',
    flex: 1,
  },

  habitInfoValue: {
    fontSize: 15,
    fontWeight: '600',
    flex: 2,
    textAlign: 'right',
  },

  insightsContainer: {
    gap: SPACING.md,
  },

  insightItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    gap: SPACING.md,
  },

  insightIcon: {
    fontSize: 24,
  },

  insightText: {
    fontSize: 15,
    lineHeight: 22,
    flex: 1,
  },
});

export default MonthStatistics;