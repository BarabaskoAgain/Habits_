// ====================================
// –ú–ï–ù–ï–î–ñ–ï–† PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// NotificationManager.js - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// ====================================

import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform, AppState } from 'react-native';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async (notification) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appState = AppState.currentState;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
      title: notification.request.content.title,
      appState: appState,
      type: notification.request.content.data?.type
    });
    
    // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    const shouldShow = appState !== 'active';
    
    return {
      shouldShowAlert: shouldShow,
      shouldPlaySound: shouldShow,
      shouldSetBadge: true,
    };
  },
});

class NotificationManager {
  
  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
  static async initialize() {
    try {
      console.log('üîî –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (!Device.isDevice) {
        console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        return false;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è Android
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('habits', {
          name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö',
          importance: Notifications.AndroidImportance.HIGH,
          vibrationPattern: [0, 250, 250, 250],
          sound: true,
          lightColor: '#2196F3',
          showBadge: true,
        });
        console.log('‚úÖ Android –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        console.log('üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
        const { status } = await Notifications.requestPermissionsAsync({
          ios: {
            allowAlert: true,
            allowBadge: true,
            allowSound: true,
            allowAnnouncements: true,
          },
        });
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.log('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        return false;
      }

      console.log('‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const scheduled = await Notifications.getAllScheduledNotificationsAsync();
      console.log(`üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${scheduled.length}`);
      
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // === –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –î–õ–Ø –û–î–ù–û–ô –ü–†–ò–í–´–ß–ö–ò ===
  static async scheduleHabitReminder(habit, settings) {
    try {
      if (!habit.reminderEnabled || !habit.reminderTime) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${habit.name} - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã`);
        return false;
      }

      console.log(`‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è "${habit.name}" –Ω–∞ ${habit.reminderTime}`);

      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      await this.cancelHabitReminder(habit.id);

      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
      const [hours, minutes] = habit.reminderTime.split(':').map(Number);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const now = new Date();
      const scheduledTime = new Date();
      scheduledTime.setHours(hours, minutes, 0, 0);
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (scheduledTime <= now) {
        scheduledTime.setDate(scheduledTime.getDate() + 1);
        console.log(`‚è≠Ô∏è –í—Ä–µ–º—è ${habit.reminderTime} —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞`);
      }
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      const identifier = `habit-${habit.id}-reminder`;
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notificationId = await Notifications.scheduleNotificationAsync({
        identifier: identifier,
        content: {
          title: 'üéØ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏!',
          body: `–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: ${habit.name}`,
          data: { 
            type: 'habit_reminder', 
            habitId: habit.id,
            habitName: habit.name 
          },
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
          badge: 1,
        },
        trigger: {
          hour: hours,
          minute: minutes,
          repeats: true,
          channelId: Platform.OS === 'android' ? 'habits' : undefined,
        },
      });

      console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è "${habit.name}":`);
      console.log(`   ID: ${notificationId}`);
      console.log(`   –í—Ä–µ–º—è: ${habit.reminderTime} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ`);
      console.log(`   –ü–µ—Ä–≤–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ: ${scheduledTime.toLocaleString()}`);
      
      return true;
    } catch (error) {
      console.error(`üö® –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${habit.name}:`, error);
      return false;
    }
  }

  // === –û–¢–ú–ï–ù–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –î–õ–Ø –ü–†–ò–í–´–ß–ö–ò ===
  static async cancelHabitReminder(habitId) {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      const habitNotifications = notifications.filter(
        notif => notif.content.data?.habitId === habitId
      );
      
      if (habitNotifications.length > 0) {
        for (const notif of habitNotifications) {
          await Notifications.cancelScheduledNotificationAsync(notif.identifier);
        }
        console.log(`‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã ${habitNotifications.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ ${habitId}`);
      }
      
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
      return false;
    }
  }

  // === –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===
  static async scheduleAllReminders(habits, settings) {
    try {
      console.log(`üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è ${habits.length} –ø—Ä–∏–≤—ã—á–µ–∫...`);
      
      let successCount = 0;
      let skipCount = 0;
      
      for (const habit of habits) {
        if (habit.reminderEnabled && habit.reminderTime) {
          const success = await this.scheduleHabitReminder(habit, settings);
          if (success) successCount++;
        } else {
          skipCount++;
        }
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}`);
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω—ã): ${skipCount}`);
      
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
      return false;
    }
  }

  // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –ü–†–ò–í–´–ß–ö–ò ===
  static async updateHabitReminder(habit, settings) {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è "${habit.name}"`);
      
      // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ
      await this.cancelHabitReminder(habit.id);
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (habit.reminderEnabled && habit.reminderTime) {
        return await this.scheduleHabitReminder(habit, settings);
      }
      
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
      return false;
    }
  }

  // === –û–¢–ú–ï–ù–ê –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
  static async cancelAllNotifications() {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // === –ü–û–õ–£–ß–ò–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–• ===
  static async getScheduledNotifications() {
    try {
      const notifications = await Notifications.getAllScheduledNotificationsAsync();
      
      console.log(`\nüìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${notifications.length}):`);
      
      notifications.forEach((notif, index) => {
        const data = notif.content.data;
        const trigger = notif.trigger;
        
        console.log(`\n${index + 1}. ${notif.content.title}`);
        console.log(`   –¢–µ–∫—Å—Ç: ${notif.content.body}`);
        console.log(`   ID: ${notif.identifier}`);
        
        if (data?.habitName) {
          console.log(`   –ü—Ä–∏–≤—ã—á–∫–∞: ${data.habitName}`);
        }
        
        if (trigger?.hour !== undefined) {
          console.log(`   –í—Ä–µ–º—è: ${String(trigger.hour).padStart(2, '0')}:${String(trigger.minute).padStart(2, '0')}`);
          console.log(`   –ü–æ–≤—Ç–æ—Ä: ${trigger.repeats ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ' : '–û–¥–∏–Ω —Ä–∞–∑'}`);
        }
      });
      
      return notifications;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // === –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ===
  static async sendTestNotification() {
    try {
      console.log('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üéâ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          body: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
          data: { type: 'test' },
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: null, // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
      });
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // === –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô ===
  static async checkPermissions() {
    try {
      const { status } = await Notifications.getPermissionsAsync();
      const settings = await Notifications.getNotificationChannelsAsync();
      
      console.log('\nüì± –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:');
      console.log(`   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${status}`);
      
      if (Platform.OS === 'android') {
        console.log(`   –ö–∞–Ω–∞–ª—ã Android: ${settings.length}`);
        settings.forEach(channel => {
          console.log(`   - ${channel.name}: ${channel.importance}`);
        });
      }
      
      return status === 'granted';
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // === –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –î–û–°–¢–ò–ñ–ï–ù–ò–ò ===
  static async sendAchievementNotification(achievement) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (AppState.currentState === 'active') {
        console.log('‚è≠Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏');
        return false;
      }
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
          body: achievement.title,
          data: { 
            type: 'achievement',
            achievementId: achievement.id 
          },
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: null, // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
      });
      
      console.log(`üèÜ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: ${achievement.title}`);
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:', error);
      return false;
    }
  }
  
  // === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
  static async debugInfo() {
    console.log('\nüîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
    console.log('=====================================');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await this.checkPermissions();
    
    // –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await this.getScheduledNotifications();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log(`\nüì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${AppState.currentState}`);
    
    console.log('=====================================\n');
  }

  // === –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–†–ò –ó–ê–ö–†–´–¢–û–ú –ü–†–ò–õ–û–ñ–ï–ù–ò–ò ===
  static async scheduleBackgroundTest() {
    try {
      console.log('üß™ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
      const trigger = new Date();
      trigger.setMinutes(trigger.getMinutes() + 1);
      
      await Notifications.scheduleNotificationAsync({
        content: {
          title: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!',
          body: '–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ',
          data: { type: 'background_test' },
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger: {
          date: trigger,
        },
      });
      
      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${trigger.toLocaleTimeString()}`);
      console.log('üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É');
      
      return true;
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
      return false;
    }
  }
}

export default NotificationManager;